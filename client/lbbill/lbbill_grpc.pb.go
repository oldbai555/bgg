// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: lbbill.proto

package lbbill

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LbbillClient is the client API for Lbbill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LbbillClient interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBill(ctx context.Context, in *AddBillReq, opts ...grpc.CallOption) (*AddBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBill(ctx context.Context, in *DelBillReq, opts ...grpc.CallOption) (*DelBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBill(ctx context.Context, in *UpdateBillReq, opts ...grpc.CallOption) (*UpdateBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBill(ctx context.Context, in *GetBillReq, opts ...grpc.CallOption) (*GetBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillList(ctx context.Context, in *GetBillListReq, opts ...grpc.CallOption) (*GetBillListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBillCategory(ctx context.Context, in *AddBillCategoryReq, opts ...grpc.CallOption) (*AddBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBillCategory(ctx context.Context, in *DelBillCategoryReq, opts ...grpc.CallOption) (*DelBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBillCategory(ctx context.Context, in *UpdateBillCategoryReq, opts ...grpc.CallOption) (*UpdateBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategory(ctx context.Context, in *GetBillCategoryReq, opts ...grpc.CallOption) (*GetBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategoryList(ctx context.Context, in *GetBillCategoryListReq, opts ...grpc.CallOption) (*GetBillCategoryListRsp, error)
}

type lbbillClient struct {
	cc grpc.ClientConnInterface
}

func NewLbbillClient(cc grpc.ClientConnInterface) LbbillClient {
	return &lbbillClient{cc}
}

func (c *lbbillClient) AddBill(ctx context.Context, in *AddBillReq, opts ...grpc.CallOption) (*AddBillRsp, error) {
	out := new(AddBillRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/AddBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) DelBill(ctx context.Context, in *DelBillReq, opts ...grpc.CallOption) (*DelBillRsp, error) {
	out := new(DelBillRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/DelBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) UpdateBill(ctx context.Context, in *UpdateBillReq, opts ...grpc.CallOption) (*UpdateBillRsp, error) {
	out := new(UpdateBillRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/UpdateBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBill(ctx context.Context, in *GetBillReq, opts ...grpc.CallOption) (*GetBillRsp, error) {
	out := new(GetBillRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBillList(ctx context.Context, in *GetBillListReq, opts ...grpc.CallOption) (*GetBillListRsp, error) {
	out := new(GetBillListRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBillList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) AddBillCategory(ctx context.Context, in *AddBillCategoryReq, opts ...grpc.CallOption) (*AddBillCategoryRsp, error) {
	out := new(AddBillCategoryRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/AddBillCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) DelBillCategory(ctx context.Context, in *DelBillCategoryReq, opts ...grpc.CallOption) (*DelBillCategoryRsp, error) {
	out := new(DelBillCategoryRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/DelBillCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) UpdateBillCategory(ctx context.Context, in *UpdateBillCategoryReq, opts ...grpc.CallOption) (*UpdateBillCategoryRsp, error) {
	out := new(UpdateBillCategoryRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/UpdateBillCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBillCategory(ctx context.Context, in *GetBillCategoryReq, opts ...grpc.CallOption) (*GetBillCategoryRsp, error) {
	out := new(GetBillCategoryRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBillCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBillCategoryList(ctx context.Context, in *GetBillCategoryListReq, opts ...grpc.CallOption) (*GetBillCategoryListRsp, error) {
	out := new(GetBillCategoryListRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBillCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbbillServer is the server API for Lbbill service.
// All implementations must embed UnimplementedLbbillServer
// for forward compatibility
type LbbillServer interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBill(context.Context, *AddBillReq) (*AddBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBill(context.Context, *DelBillReq) (*DelBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBill(context.Context, *UpdateBillReq) (*UpdateBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBill(context.Context, *GetBillReq) (*GetBillRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillList(context.Context, *GetBillListReq) (*GetBillListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBillCategory(context.Context, *AddBillCategoryReq) (*AddBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBillCategory(context.Context, *DelBillCategoryReq) (*DelBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBillCategory(context.Context, *UpdateBillCategoryReq) (*UpdateBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategory(context.Context, *GetBillCategoryReq) (*GetBillCategoryRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategoryList(context.Context, *GetBillCategoryListReq) (*GetBillCategoryListRsp, error)
	mustEmbedUnimplementedLbbillServer()
}

// UnimplementedLbbillServer must be embedded to have forward compatible implementations.
type UnimplementedLbbillServer struct {
}

func (UnimplementedLbbillServer) AddBill(context.Context, *AddBillReq) (*AddBillRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBill not implemented")
}
func (UnimplementedLbbillServer) DelBill(context.Context, *DelBillReq) (*DelBillRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBill not implemented")
}
func (UnimplementedLbbillServer) UpdateBill(context.Context, *UpdateBillReq) (*UpdateBillRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBill not implemented")
}
func (UnimplementedLbbillServer) GetBill(context.Context, *GetBillReq) (*GetBillRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBill not implemented")
}
func (UnimplementedLbbillServer) GetBillList(context.Context, *GetBillListReq) (*GetBillListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillList not implemented")
}
func (UnimplementedLbbillServer) AddBillCategory(context.Context, *AddBillCategoryReq) (*AddBillCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillCategory not implemented")
}
func (UnimplementedLbbillServer) DelBillCategory(context.Context, *DelBillCategoryReq) (*DelBillCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBillCategory not implemented")
}
func (UnimplementedLbbillServer) UpdateBillCategory(context.Context, *UpdateBillCategoryReq) (*UpdateBillCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillCategory not implemented")
}
func (UnimplementedLbbillServer) GetBillCategory(context.Context, *GetBillCategoryReq) (*GetBillCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillCategory not implemented")
}
func (UnimplementedLbbillServer) GetBillCategoryList(context.Context, *GetBillCategoryListReq) (*GetBillCategoryListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillCategoryList not implemented")
}
func (UnimplementedLbbillServer) mustEmbedUnimplementedLbbillServer() {}

// UnsafeLbbillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LbbillServer will
// result in compilation errors.
type UnsafeLbbillServer interface {
	mustEmbedUnimplementedLbbillServer()
}

func RegisterLbbillServer(s grpc.ServiceRegistrar, srv LbbillServer) {
	s.RegisterService(&Lbbill_ServiceDesc, srv)
}

func _Lbbill_AddBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).AddBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/AddBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).AddBill(ctx, req.(*AddBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_DelBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).DelBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/DelBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).DelBill(ctx, req.(*DelBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_UpdateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).UpdateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/UpdateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).UpdateBill(ctx, req.(*UpdateBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBill(ctx, req.(*GetBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBillList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBillList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBillList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBillList(ctx, req.(*GetBillListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_AddBillCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBillCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).AddBillCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/AddBillCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).AddBillCategory(ctx, req.(*AddBillCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_DelBillCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBillCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).DelBillCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/DelBillCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).DelBillCategory(ctx, req.(*DelBillCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_UpdateBillCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).UpdateBillCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/UpdateBillCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).UpdateBillCategory(ctx, req.(*UpdateBillCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBillCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBillCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBillCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBillCategory(ctx, req.(*GetBillCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBillCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBillCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBillCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBillCategoryList(ctx, req.(*GetBillCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lbbill_ServiceDesc is the grpc.ServiceDesc for Lbbill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lbbill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbbill.lbbill",
	HandlerType: (*LbbillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBill",
			Handler:    _Lbbill_AddBill_Handler,
		},
		{
			MethodName: "DelBill",
			Handler:    _Lbbill_DelBill_Handler,
		},
		{
			MethodName: "UpdateBill",
			Handler:    _Lbbill_UpdateBill_Handler,
		},
		{
			MethodName: "GetBill",
			Handler:    _Lbbill_GetBill_Handler,
		},
		{
			MethodName: "GetBillList",
			Handler:    _Lbbill_GetBillList_Handler,
		},
		{
			MethodName: "AddBillCategory",
			Handler:    _Lbbill_AddBillCategory_Handler,
		},
		{
			MethodName: "DelBillCategory",
			Handler:    _Lbbill_DelBillCategory_Handler,
		},
		{
			MethodName: "UpdateBillCategory",
			Handler:    _Lbbill_UpdateBillCategory_Handler,
		},
		{
			MethodName: "GetBillCategory",
			Handler:    _Lbbill_GetBillCategory_Handler,
		},
		{
			MethodName: "GetBillCategoryList",
			Handler:    _Lbbill_GetBillCategoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbbill.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lbbill.proto

package lbbill

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelBill with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelBill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelBill with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelBillMultiError, or nil
// if none found.
func (m *ModelBill) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelBill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatorUid

	// no validation rules for Amount

	// no validation rules for CategoryId

	// no validation rules for DateUnix

	// no validation rules for RootCategory

	if len(errors) > 0 {
		return ModelBillMultiError(errors)
	}

	return nil
}

// ModelBillMultiError is an error wrapping multiple validation errors returned
// by ModelBill.ValidateAll() if the designated constraints aren't met.
type ModelBillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelBillMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelBillMultiError) AllErrors() []error { return m }

// ModelBillValidationError is the validation error returned by
// ModelBill.Validate if the designated constraints aren't met.
type ModelBillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelBillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelBillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelBillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelBillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelBillValidationError) ErrorName() string { return "ModelBillValidationError" }

// Error satisfies the builtin error interface
func (e ModelBillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelBill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelBillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelBillValidationError{}

// Validate checks the field values on ModelCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelCategoryMultiError, or
// nil if none found.
func (m *ModelCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Name

	// no validation rules for RootCategory

	if len(errors) > 0 {
		return ModelCategoryMultiError(errors)
	}

	return nil
}

// ModelCategoryMultiError is an error wrapping multiple validation errors
// returned by ModelCategory.ValidateAll() if the designated constraints
// aren't met.
type ModelCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelCategoryMultiError) AllErrors() []error { return m }

// ModelCategoryValidationError is the validation error returned by
// ModelCategory.Validate if the designated constraints aren't met.
type ModelCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelCategoryValidationError) ErrorName() string { return "ModelCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ModelCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelCategoryValidationError{}

// Validate checks the field values on AddBillReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBillReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBillReqMultiError, or
// nil if none found.
func (m *AddBillReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBill() == nil {
		err := AddBillReqValidationError{
			field:  "Bill",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillReqValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillReqValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillReqValidationError{
				field:  "Bill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillReqMultiError(errors)
	}

	return nil
}

// AddBillReqMultiError is an error wrapping multiple validation errors
// returned by AddBillReq.ValidateAll() if the designated constraints aren't met.
type AddBillReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillReqMultiError) AllErrors() []error { return m }

// AddBillReqValidationError is the validation error returned by
// AddBillReq.Validate if the designated constraints aren't met.
type AddBillReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillReqValidationError) ErrorName() string { return "AddBillReqValidationError" }

// Error satisfies the builtin error interface
func (e AddBillReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillReqValidationError{}

// Validate checks the field values on AddBillRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBillRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBillRspMultiError, or
// nil if none found.
func (m *AddBillRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillRspValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillRspValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillRspValidationError{
				field:  "Bill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillRspMultiError(errors)
	}

	return nil
}

// AddBillRspMultiError is an error wrapping multiple validation errors
// returned by AddBillRsp.ValidateAll() if the designated constraints aren't met.
type AddBillRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillRspMultiError) AllErrors() []error { return m }

// AddBillRspValidationError is the validation error returned by
// AddBillRsp.Validate if the designated constraints aren't met.
type AddBillRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillRspValidationError) ErrorName() string { return "AddBillRspValidationError" }

// Error satisfies the builtin error interface
func (e AddBillRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillRspValidationError{}

// Validate checks the field values on DelBillReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelBillReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelBillReqMultiError, or
// nil if none found.
func (m *DelBillReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DelBillReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelBillReqMultiError(errors)
	}

	return nil
}

// DelBillReqMultiError is an error wrapping multiple validation errors
// returned by DelBillReq.ValidateAll() if the designated constraints aren't met.
type DelBillReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillReqMultiError) AllErrors() []error { return m }

// DelBillReqValidationError is the validation error returned by
// DelBillReq.Validate if the designated constraints aren't met.
type DelBillReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillReqValidationError) ErrorName() string { return "DelBillReqValidationError" }

// Error satisfies the builtin error interface
func (e DelBillReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillReqValidationError{}

// Validate checks the field values on DelBillRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelBillRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelBillRspMultiError, or
// nil if none found.
func (m *DelBillRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelBillRspMultiError(errors)
	}

	return nil
}

// DelBillRspMultiError is an error wrapping multiple validation errors
// returned by DelBillRsp.ValidateAll() if the designated constraints aren't met.
type DelBillRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillRspMultiError) AllErrors() []error { return m }

// DelBillRspValidationError is the validation error returned by
// DelBillRsp.Validate if the designated constraints aren't met.
type DelBillRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillRspValidationError) ErrorName() string { return "DelBillRspValidationError" }

// Error satisfies the builtin error interface
func (e DelBillRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillRspValidationError{}

// Validate checks the field values on UpdateBillReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBillReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateBillReqMultiError, or
// nil if none found.
func (m *UpdateBillReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBill() == nil {
		err := UpdateBillReqValidationError{
			field:  "Bill",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillReqValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillReqValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillReqValidationError{
				field:  "Bill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBillReqMultiError(errors)
	}

	return nil
}

// UpdateBillReqMultiError is an error wrapping multiple validation errors
// returned by UpdateBillReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateBillReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillReqMultiError) AllErrors() []error { return m }

// UpdateBillReqValidationError is the validation error returned by
// UpdateBillReq.Validate if the designated constraints aren't met.
type UpdateBillReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillReqValidationError) ErrorName() string { return "UpdateBillReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBillReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillReqValidationError{}

// Validate checks the field values on UpdateBillRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBillRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateBillRspMultiError, or
// nil if none found.
func (m *UpdateBillRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBillRspMultiError(errors)
	}

	return nil
}

// UpdateBillRspMultiError is an error wrapping multiple validation errors
// returned by UpdateBillRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateBillRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillRspMultiError) AllErrors() []error { return m }

// UpdateBillRspValidationError is the validation error returned by
// UpdateBillRsp.Validate if the designated constraints aren't met.
type UpdateBillRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillRspValidationError) ErrorName() string { return "UpdateBillRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBillRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillRspValidationError{}

// Validate checks the field values on GetBillReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBillReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBillReqMultiError, or
// nil if none found.
func (m *GetBillReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetBillReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBillReqMultiError(errors)
	}

	return nil
}

// GetBillReqMultiError is an error wrapping multiple validation errors
// returned by GetBillReq.ValidateAll() if the designated constraints aren't met.
type GetBillReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillReqMultiError) AllErrors() []error { return m }

// GetBillReqValidationError is the validation error returned by
// GetBillReq.Validate if the designated constraints aren't met.
type GetBillReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillReqValidationError) ErrorName() string { return "GetBillReqValidationError" }

// Error satisfies the builtin error interface
func (e GetBillReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillReqValidationError{}

// Validate checks the field values on GetBillRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBillRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBillRspMultiError, or
// nil if none found.
func (m *GetBillRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillRspValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillRspValidationError{
					field:  "Bill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillRspValidationError{
				field:  "Bill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillRspValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillRspMultiError(errors)
	}

	return nil
}

// GetBillRspMultiError is an error wrapping multiple validation errors
// returned by GetBillRsp.ValidateAll() if the designated constraints aren't met.
type GetBillRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillRspMultiError) AllErrors() []error { return m }

// GetBillRspValidationError is the validation error returned by
// GetBillRsp.Validate if the designated constraints aren't met.
type GetBillRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillRspValidationError) ErrorName() string { return "GetBillRspValidationError" }

// Error satisfies the builtin error interface
func (e GetBillRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillRspValidationError{}

// Validate checks the field values on GetBillListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBillListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBillListReqMultiError,
// or nil if none found.
func (m *GetBillListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetBillListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillListReqMultiError(errors)
	}

	return nil
}

// GetBillListReqMultiError is an error wrapping multiple validation errors
// returned by GetBillListReq.ValidateAll() if the designated constraints
// aren't met.
type GetBillListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillListReqMultiError) AllErrors() []error { return m }

// GetBillListReqValidationError is the validation error returned by
// GetBillListReq.Validate if the designated constraints aren't met.
type GetBillListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillListReqValidationError) ErrorName() string { return "GetBillListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetBillListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillListReqValidationError{}

// Validate checks the field values on GetBillListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBillListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBillListRspMultiError,
// or nil if none found.
func (m *GetBillListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillListRspValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBillListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBillListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBillListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]uint64, len(m.GetCategoryMap()))
		i := 0
		for key := range m.GetCategoryMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCategoryMap()[key]
			_ = val

			// no validation rules for CategoryMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetBillListRspValidationError{
							field:  fmt.Sprintf("CategoryMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetBillListRspValidationError{
							field:  fmt.Sprintf("CategoryMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetBillListRspValidationError{
						field:  fmt.Sprintf("CategoryMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetBillListRspMultiError(errors)
	}

	return nil
}

// GetBillListRspMultiError is an error wrapping multiple validation errors
// returned by GetBillListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetBillListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillListRspMultiError) AllErrors() []error { return m }

// GetBillListRspValidationError is the validation error returned by
// GetBillListRsp.Validate if the designated constraints aren't met.
type GetBillListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillListRspValidationError) ErrorName() string { return "GetBillListRspValidationError" }

// Error satisfies the builtin error interface
func (e GetBillListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillListRspValidationError{}

// Validate checks the field values on AddBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBillCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBillCategoryReqMultiError, or nil if none found.
func (m *AddBillCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := AddBillCategoryReqValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillCategoryReqValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillCategoryReqMultiError(errors)
	}

	return nil
}

// AddBillCategoryReqMultiError is an error wrapping multiple validation errors
// returned by AddBillCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type AddBillCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillCategoryReqMultiError) AllErrors() []error { return m }

// AddBillCategoryReqValidationError is the validation error returned by
// AddBillCategoryReq.Validate if the designated constraints aren't met.
type AddBillCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillCategoryReqValidationError) ErrorName() string {
	return "AddBillCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddBillCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillCategoryReqValidationError{}

// Validate checks the field values on AddBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBillCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBillCategoryRspMultiError, or nil if none found.
func (m *AddBillCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillCategoryRspValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillCategoryRspMultiError(errors)
	}

	return nil
}

// AddBillCategoryRspMultiError is an error wrapping multiple validation errors
// returned by AddBillCategoryRsp.ValidateAll() if the designated constraints
// aren't met.
type AddBillCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillCategoryRspMultiError) AllErrors() []error { return m }

// AddBillCategoryRspValidationError is the validation error returned by
// AddBillCategoryRsp.Validate if the designated constraints aren't met.
type AddBillCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillCategoryRspValidationError) ErrorName() string {
	return "AddBillCategoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e AddBillCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillCategoryRspValidationError{}

// Validate checks the field values on DelBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelBillCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelBillCategoryReqMultiError, or nil if none found.
func (m *DelBillCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DelBillCategoryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelBillCategoryReqMultiError(errors)
	}

	return nil
}

// DelBillCategoryReqMultiError is an error wrapping multiple validation errors
// returned by DelBillCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type DelBillCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillCategoryReqMultiError) AllErrors() []error { return m }

// DelBillCategoryReqValidationError is the validation error returned by
// DelBillCategoryReq.Validate if the designated constraints aren't met.
type DelBillCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillCategoryReqValidationError) ErrorName() string {
	return "DelBillCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelBillCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillCategoryReqValidationError{}

// Validate checks the field values on DelBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelBillCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelBillCategoryRspMultiError, or nil if none found.
func (m *DelBillCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelBillCategoryRspMultiError(errors)
	}

	return nil
}

// DelBillCategoryRspMultiError is an error wrapping multiple validation errors
// returned by DelBillCategoryRsp.ValidateAll() if the designated constraints
// aren't met.
type DelBillCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillCategoryRspMultiError) AllErrors() []error { return m }

// DelBillCategoryRspValidationError is the validation error returned by
// DelBillCategoryRsp.Validate if the designated constraints aren't met.
type DelBillCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillCategoryRspValidationError) ErrorName() string {
	return "DelBillCategoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e DelBillCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillCategoryRspValidationError{}

// Validate checks the field values on UpdateBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillCategoryReqMultiError, or nil if none found.
func (m *UpdateBillCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := UpdateBillCategoryReqValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillCategoryReqValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBillCategoryReqMultiError(errors)
	}

	return nil
}

// UpdateBillCategoryReqMultiError is an error wrapping multiple validation
// errors returned by UpdateBillCategoryReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillCategoryReqMultiError) AllErrors() []error { return m }

// UpdateBillCategoryReqValidationError is the validation error returned by
// UpdateBillCategoryReq.Validate if the designated constraints aren't met.
type UpdateBillCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillCategoryReqValidationError) ErrorName() string {
	return "UpdateBillCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillCategoryReqValidationError{}

// Validate checks the field values on UpdateBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillCategoryRspMultiError, or nil if none found.
func (m *UpdateBillCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBillCategoryRspMultiError(errors)
	}

	return nil
}

// UpdateBillCategoryRspMultiError is an error wrapping multiple validation
// errors returned by UpdateBillCategoryRsp.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillCategoryRspMultiError) AllErrors() []error { return m }

// UpdateBillCategoryRspValidationError is the validation error returned by
// UpdateBillCategoryRsp.Validate if the designated constraints aren't met.
type UpdateBillCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillCategoryRspValidationError) ErrorName() string {
	return "UpdateBillCategoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillCategoryRspValidationError{}

// Validate checks the field values on GetBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategoryReqMultiError, or nil if none found.
func (m *GetBillCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetBillCategoryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBillCategoryReqMultiError(errors)
	}

	return nil
}

// GetBillCategoryReqMultiError is an error wrapping multiple validation errors
// returned by GetBillCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type GetBillCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategoryReqMultiError) AllErrors() []error { return m }

// GetBillCategoryReqValidationError is the validation error returned by
// GetBillCategoryReq.Validate if the designated constraints aren't met.
type GetBillCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategoryReqValidationError) ErrorName() string {
	return "GetBillCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategoryReqValidationError{}

// Validate checks the field values on GetBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategoryRspMultiError, or nil if none found.
func (m *GetBillCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillCategoryRspValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillCategoryRspMultiError(errors)
	}

	return nil
}

// GetBillCategoryRspMultiError is an error wrapping multiple validation errors
// returned by GetBillCategoryRsp.ValidateAll() if the designated constraints
// aren't met.
type GetBillCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategoryRspMultiError) AllErrors() []error { return m }

// GetBillCategoryRspValidationError is the validation error returned by
// GetBillCategoryRsp.Validate if the designated constraints aren't met.
type GetBillCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategoryRspValidationError) ErrorName() string {
	return "GetBillCategoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategoryRspValidationError{}

// Validate checks the field values on GetBillCategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategoryListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategoryListReqMultiError, or nil if none found.
func (m *GetBillCategoryListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategoryListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetBillCategoryListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillCategoryListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillCategoryListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillCategoryListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillCategoryListReqMultiError(errors)
	}

	return nil
}

// GetBillCategoryListReqMultiError is an error wrapping multiple validation
// errors returned by GetBillCategoryListReq.ValidateAll() if the designated
// constraints aren't met.
type GetBillCategoryListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategoryListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategoryListReqMultiError) AllErrors() []error { return m }

// GetBillCategoryListReqValidationError is the validation error returned by
// GetBillCategoryListReq.Validate if the designated constraints aren't met.
type GetBillCategoryListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategoryListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategoryListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategoryListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategoryListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategoryListReqValidationError) ErrorName() string {
	return "GetBillCategoryListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategoryListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategoryListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategoryListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategoryListReqValidationError{}

// Validate checks the field values on GetBillCategoryListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategoryListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategoryListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategoryListRspMultiError, or nil if none found.
func (m *GetBillCategoryListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategoryListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillCategoryListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillCategoryListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillCategoryListRspValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBillCategoryListRspValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBillCategoryListRspValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBillCategoryListRspValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBillCategoryListRspMultiError(errors)
	}

	return nil
}

// GetBillCategoryListRspMultiError is an error wrapping multiple validation
// errors returned by GetBillCategoryListRsp.ValidateAll() if the designated
// constraints aren't met.
type GetBillCategoryListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategoryListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategoryListRspMultiError) AllErrors() []error { return m }

// GetBillCategoryListRspValidationError is the validation error returned by
// GetBillCategoryListRsp.Validate if the designated constraints aren't met.
type GetBillCategoryListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategoryListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategoryListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategoryListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategoryListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategoryListRspValidationError) ErrorName() string {
	return "GetBillCategoryListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategoryListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategoryListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategoryListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategoryListRspValidationError{}

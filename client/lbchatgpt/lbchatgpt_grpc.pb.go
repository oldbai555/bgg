// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: lbchatgpt.proto

package lbchatgpt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LbchatgptClient is the client API for Lbchatgpt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LbchatgptClient interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (*ChatCompletionRsp, error)
}

type lbchatgptClient struct {
	cc grpc.ClientConnInterface
}

func NewLbchatgptClient(cc grpc.ClientConnInterface) LbchatgptClient {
	return &lbchatgptClient{cc}
}

func (c *lbchatgptClient) ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (*ChatCompletionRsp, error) {
	out := new(ChatCompletionRsp)
	err := c.cc.Invoke(ctx, "/lbchatgpt.lbchatgpt/ChatCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbchatgptServer is the server API for Lbchatgpt service.
// All implementations must embed UnimplementedLbchatgptServer
// for forward compatibility
type LbchatgptServer interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	ChatCompletion(context.Context, *ChatCompletionReq) (*ChatCompletionRsp, error)
	mustEmbedUnimplementedLbchatgptServer()
}

// UnimplementedLbchatgptServer must be embedded to have forward compatible implementations.
type UnimplementedLbchatgptServer struct {
}

func (UnimplementedLbchatgptServer) ChatCompletion(context.Context, *ChatCompletionReq) (*ChatCompletionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletion not implemented")
}
func (UnimplementedLbchatgptServer) mustEmbedUnimplementedLbchatgptServer() {}

// UnsafeLbchatgptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LbchatgptServer will
// result in compilation errors.
type UnsafeLbchatgptServer interface {
	mustEmbedUnimplementedLbchatgptServer()
}

func RegisterLbchatgptServer(s grpc.ServiceRegistrar, srv LbchatgptServer) {
	s.RegisterService(&Lbchatgpt_ServiceDesc, srv)
}

func _Lbchatgpt_ChatCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbchatgptServer).ChatCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbchatgpt.lbchatgpt/ChatCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbchatgptServer).ChatCompletion(ctx, req.(*ChatCompletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lbchatgpt_ServiceDesc is the grpc.ServiceDesc for Lbchatgpt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lbchatgpt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbchatgpt.lbchatgpt",
	HandlerType: (*LbchatgptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCompletion",
			Handler:    _Lbchatgpt_ChatCompletion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbchatgpt.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lbim.proto

package lbim

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelMessageMultiError, or
// nil if none found.
func (m *ModelMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for ServerMsgId

	// no validation rules for SysMsgId

	// no validation rules for SendAt

	// no validation rules for From

	// no validation rules for To

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelMessageValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	// no validation rules for Type

	if len(errors) > 0 {
		return ModelMessageMultiError(errors)
	}

	return nil
}

// ModelMessageMultiError is an error wrapping multiple validation errors
// returned by ModelMessage.ValidateAll() if the designated constraints aren't met.
type ModelMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelMessageMultiError) AllErrors() []error { return m }

// ModelMessageValidationError is the validation error returned by
// ModelMessage.Validate if the designated constraints aren't met.
type ModelMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelMessageValidationError) ErrorName() string { return "ModelMessageValidationError" }

// Error satisfies the builtin error interface
func (e ModelMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelMessageValidationError{}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVoice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Voice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Voice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Voice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on Content_Text with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content_Text) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content_Text with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Content_TextMultiError, or
// nil if none found.
func (m *Content_Text) ValidateAll() error {
	return m.validate(true)
}

func (m *Content_Text) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Translated

	if len(errors) > 0 {
		return Content_TextMultiError(errors)
	}

	return nil
}

// Content_TextMultiError is an error wrapping multiple validation errors
// returned by Content_Text.ValidateAll() if the designated constraints aren't met.
type Content_TextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Content_TextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Content_TextMultiError) AllErrors() []error { return m }

// Content_TextValidationError is the validation error returned by
// Content_Text.Validate if the designated constraints aren't met.
type Content_TextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Content_TextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Content_TextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Content_TextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Content_TextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Content_TextValidationError) ErrorName() string { return "Content_TextValidationError" }

// Error satisfies the builtin error interface
func (e Content_TextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent_Text.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Content_TextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Content_TextValidationError{}

// Validate checks the field values on Content_Image with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content_Image with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Content_ImageMultiError, or
// nil if none found.
func (m *Content_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *Content_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Caption

	// no validation rules for FileName

	// no validation rules for Format

	if len(errors) > 0 {
		return Content_ImageMultiError(errors)
	}

	return nil
}

// Content_ImageMultiError is an error wrapping multiple validation errors
// returned by Content_Image.ValidateAll() if the designated constraints
// aren't met.
type Content_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Content_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Content_ImageMultiError) AllErrors() []error { return m }

// Content_ImageValidationError is the validation error returned by
// Content_Image.Validate if the designated constraints aren't met.
type Content_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Content_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Content_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Content_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Content_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Content_ImageValidationError) ErrorName() string { return "Content_ImageValidationError" }

// Error satisfies the builtin error interface
func (e Content_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Content_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Content_ImageValidationError{}

// Validate checks the field values on Content_Video with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content_Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content_Video with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Content_VideoMultiError, or
// nil if none found.
func (m *Content_Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Content_Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Caption

	// no validation rules for FileName

	// no validation rules for Format

	if len(errors) > 0 {
		return Content_VideoMultiError(errors)
	}

	return nil
}

// Content_VideoMultiError is an error wrapping multiple validation errors
// returned by Content_Video.ValidateAll() if the designated constraints
// aren't met.
type Content_VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Content_VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Content_VideoMultiError) AllErrors() []error { return m }

// Content_VideoValidationError is the validation error returned by
// Content_Video.Validate if the designated constraints aren't met.
type Content_VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Content_VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Content_VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Content_VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Content_VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Content_VideoValidationError) ErrorName() string { return "Content_VideoValidationError" }

// Error satisfies the builtin error interface
func (e Content_VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent_Video.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Content_VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Content_VideoValidationError{}

// Validate checks the field values on Content_Voice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content_Voice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content_Voice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Content_VoiceMultiError, or
// nil if none found.
func (m *Content_Voice) ValidateAll() error {
	return m.validate(true)
}

func (m *Content_Voice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Caption

	// no validation rules for FileName

	// no validation rules for Format

	// no validation rules for Recognition

	if len(errors) > 0 {
		return Content_VoiceMultiError(errors)
	}

	return nil
}

// Content_VoiceMultiError is an error wrapping multiple validation errors
// returned by Content_Voice.ValidateAll() if the designated constraints
// aren't met.
type Content_VoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Content_VoiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Content_VoiceMultiError) AllErrors() []error { return m }

// Content_VoiceValidationError is the validation error returned by
// Content_Voice.Validate if the designated constraints aren't met.
type Content_VoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Content_VoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Content_VoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Content_VoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Content_VoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Content_VoiceValidationError) ErrorName() string { return "Content_VoiceValidationError" }

// Error satisfies the builtin error interface
func (e Content_VoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent_Voice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Content_VoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Content_VoiceValidationError{}

// Validate checks the field values on Content_Document with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Content_Document) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content_Document with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Content_DocumentMultiError, or nil if none found.
func (m *Content_Document) ValidateAll() error {
	return m.validate(true)
}

func (m *Content_Document) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Caption

	// no validation rules for FileName

	// no validation rules for Format

	if len(errors) > 0 {
		return Content_DocumentMultiError(errors)
	}

	return nil
}

// Content_DocumentMultiError is an error wrapping multiple validation errors
// returned by Content_Document.ValidateAll() if the designated constraints
// aren't met.
type Content_DocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Content_DocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Content_DocumentMultiError) AllErrors() []error { return m }

// Content_DocumentValidationError is the validation error returned by
// Content_Document.Validate if the designated constraints aren't met.
type Content_DocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Content_DocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Content_DocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Content_DocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Content_DocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Content_DocumentValidationError) ErrorName() string { return "Content_DocumentValidationError" }

// Error satisfies the builtin error interface
func (e Content_DocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent_Document.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Content_DocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Content_DocumentValidationError{}

// Validate checks the field values on Content_Location with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Content_Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content_Location with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Content_LocationMultiError, or nil if none found.
func (m *Content_Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Content_Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Scale

	// no validation rules for Label

	if len(errors) > 0 {
		return Content_LocationMultiError(errors)
	}

	return nil
}

// Content_LocationMultiError is an error wrapping multiple validation errors
// returned by Content_Location.ValidateAll() if the designated constraints
// aren't met.
type Content_LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Content_LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Content_LocationMultiError) AllErrors() []error { return m }

// Content_LocationValidationError is the validation error returned by
// Content_Location.Validate if the designated constraints aren't met.
type Content_LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Content_LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Content_LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Content_LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Content_LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Content_LocationValidationError) ErrorName() string { return "Content_LocationValidationError" }

// Error satisfies the builtin error interface
func (e Content_LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent_Location.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Content_LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Content_LocationValidationError{}

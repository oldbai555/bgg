// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: lbwebsocket.proto

package lbwebsocket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LbwebsocketClient is the client API for Lbwebsocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LbwebsocketClient interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	HandleWs(ctx context.Context, in *HandleWsReq, opts ...grpc.CallOption) (*HandleWsRsp, error)
}

type lbwebsocketClient struct {
	cc grpc.ClientConnInterface
}

func NewLbwebsocketClient(cc grpc.ClientConnInterface) LbwebsocketClient {
	return &lbwebsocketClient{cc}
}

func (c *lbwebsocketClient) HandleWs(ctx context.Context, in *HandleWsReq, opts ...grpc.CallOption) (*HandleWsRsp, error) {
	out := new(HandleWsRsp)
	err := c.cc.Invoke(ctx, "/lbwebsocket.lbwebsocket/HandleWs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbwebsocketServer is the server API for Lbwebsocket service.
// All implementations must embed UnimplementedLbwebsocketServer
// for forward compatibility
type LbwebsocketServer interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	HandleWs(context.Context, *HandleWsReq) (*HandleWsRsp, error)
	mustEmbedUnimplementedLbwebsocketServer()
}

// UnimplementedLbwebsocketServer must be embedded to have forward compatible implementations.
type UnimplementedLbwebsocketServer struct {
}

func (UnimplementedLbwebsocketServer) HandleWs(context.Context, *HandleWsReq) (*HandleWsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleWs not implemented")
}
func (UnimplementedLbwebsocketServer) mustEmbedUnimplementedLbwebsocketServer() {}

// UnsafeLbwebsocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LbwebsocketServer will
// result in compilation errors.
type UnsafeLbwebsocketServer interface {
	mustEmbedUnimplementedLbwebsocketServer()
}

func RegisterLbwebsocketServer(s grpc.ServiceRegistrar, srv LbwebsocketServer) {
	s.RegisterService(&Lbwebsocket_ServiceDesc, srv)
}

func _Lbwebsocket_HandleWs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleWsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbwebsocketServer).HandleWs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbwebsocket.lbwebsocket/HandleWs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbwebsocketServer).HandleWs(ctx, req.(*HandleWsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lbwebsocket_ServiceDesc is the grpc.ServiceDesc for Lbwebsocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lbwebsocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbwebsocket.lbwebsocket",
	HandlerType: (*LbwebsocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleWs",
			Handler:    _Lbwebsocket_HandleWs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbwebsocket.proto",
}

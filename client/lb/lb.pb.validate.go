// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lb.proto

package lb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Paginate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Paginate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Paginate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginateMultiError, or nil
// if none found.
func (m *Paginate) ValidateAll() error {
	return m.validate(true)
}

func (m *Paginate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Page

	// no validation rules for Total

	if len(errors) > 0 {
		return PaginateMultiError(errors)
	}

	return nil
}

// PaginateMultiError is an error wrapping multiple validation errors returned
// by Paginate.ValidateAll() if the designated constraints aren't met.
type PaginateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginateMultiError) AllErrors() []error { return m }

// PaginateValidationError is the validation error returned by
// Paginate.Validate if the designated constraints aren't met.
type PaginateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginateValidationError) ErrorName() string { return "PaginateValidationError" }

// Error satisfies the builtin error interface
func (e PaginateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginateValidationError{}

// Validate checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OptionsMultiError, or nil if none found.
func (m *Options) ValidateAll() error {
	return m.validate(true)
}

func (m *Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOptList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OptionsValidationError{
						field:  fmt.Sprintf("OptList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OptionsValidationError{
						field:  fmt.Sprintf("OptList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OptionsValidationError{
					field:  fmt.Sprintf("OptList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Size

	// no validation rules for Page

	// no validation rules for SkipTotal

	if len(errors) > 0 {
		return OptionsMultiError(errors)
	}

	return nil
}

// OptionsMultiError is an error wrapping multiple validation errors returned
// by Options.ValidateAll() if the designated constraints aren't met.
type OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OptionsMultiError) AllErrors() []error { return m }

// OptionsValidationError is the validation error returned by Options.Validate
// if the designated constraints aren't met.
type OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionsValidationError) ErrorName() string { return "OptionsValidationError" }

// Error satisfies the builtin error interface
func (e OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionsValidationError{}

// Validate checks the field values on RawReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RawReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RawReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RawReqMultiError, or nil if none found.
func (m *RawReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RawReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Buf

	if len(errors) > 0 {
		return RawReqMultiError(errors)
	}

	return nil
}

// RawReqMultiError is an error wrapping multiple validation errors returned by
// RawReq.ValidateAll() if the designated constraints aren't met.
type RawReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RawReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RawReqMultiError) AllErrors() []error { return m }

// RawReqValidationError is the validation error returned by RawReq.Validate if
// the designated constraints aren't met.
type RawReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawReqValidationError) ErrorName() string { return "RawReqValidationError" }

// Error satisfies the builtin error interface
func (e RawReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawReqValidationError{}

// Validate checks the field values on RawRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RawRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RawRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RawRspMultiError, or nil if none found.
func (m *RawRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *RawRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Buf

	// no validation rules for ContentType

	if len(errors) > 0 {
		return RawRspMultiError(errors)
	}

	return nil
}

// RawRspMultiError is an error wrapping multiple validation errors returned by
// RawRsp.ValidateAll() if the designated constraints aren't met.
type RawRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RawRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RawRspMultiError) AllErrors() []error { return m }

// RawRspValidationError is the validation error returned by RawRsp.Validate if
// the designated constraints aren't met.
type RawRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawRspValidationError) ErrorName() string { return "RawRspValidationError" }

// Error satisfies the builtin error interface
func (e RawRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawRspValidationError{}

// Validate checks the field values on Options_Opt with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Options_Opt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Options_Opt with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Options_OptMultiError, or
// nil if none found.
func (m *Options_Opt) ValidateAll() error {
	return m.validate(true)
}

func (m *Options_Opt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return Options_OptMultiError(errors)
	}

	return nil
}

// Options_OptMultiError is an error wrapping multiple validation errors
// returned by Options_Opt.ValidateAll() if the designated constraints aren't met.
type Options_OptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Options_OptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Options_OptMultiError) AllErrors() []error { return m }

// Options_OptValidationError is the validation error returned by
// Options_Opt.Validate if the designated constraints aren't met.
type Options_OptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Options_OptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Options_OptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Options_OptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Options_OptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Options_OptValidationError) ErrorName() string { return "Options_OptValidationError" }

// Error satisfies the builtin error interface
func (e Options_OptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptions_Opt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Options_OptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Options_OptValidationError{}

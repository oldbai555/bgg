// Code generated by rpc_gen. DO NOT EDIT.

declare namespace lbddz {
    export const enum ErrCode {
        Success = 0,
        // lbddz 120000 - 130000
        ErrAlreadyRegister = 120001, // 用户名已被注册
        ErrPasswordMistake = 120002, // 密码错误
        ErrPlayerNotFound = 120003, //
        ErrRoomNotFound = 120004, //
        ErrGameNotFound = 120005, //
        ErrGamePlayerNotFound = 120006, //
        ErrPlayCardNotFound = 120007, //
    }

    export const enum GameStateChange {
        GameStateChangeNil = 0,
        GameStateChangeWantLandlord = 1, // 抢地主阶段
        GameStateChangeGaming = 2, // 游戏中
        GameStateChangeGameOver = 3, // 游戏结束
    }

    export const enum Gender {
        GenderNil = 0,
        GenderMale = 1, // 男
        GenderFemale = 2, // 女
    }

    export const enum CardType {
        CardTypeNil = 0,
        CardTypePassCards = 1, //过
        CardTypeNoCards = 2, //前面还没有牌（首家）
        CardTypeErrorCards = 3, //错误牌型
        CardTypeSingleCard = 4, //单牌
        CardTypeDoubleCard = 5, //对子
        CardTypeThreeCard = 6, //3不带
        CardTypeThreeOneCard = 7, //3带1
        CardTypeThreeTwoCard = 8, //3带2
        CardTypeBombTwoCard = 9, //4带2
        CardTypeStraight = 10, //连牌
        CardTypeConnectCard = 11, //连对
        CardTypeAircraft = 12, //飞机不带
        CardTypeAircraftCard = 13, //飞机带单牌
        CardTypeAircraftWing = 14, //飞机带对子
        CardTypeBombCard = 15, //炸弹
        CardTypeKingBombCard = 16, //王炸
        CardTypeBombFourCard = 17, // 4带2对
        CardTypeBombTwoStraightCard = 18, // 连续4带2
        CardTypeBombFourStraightCard = 19, // 连续4带2对
    }

    export const enum Event_Type {
        TypeNil = 0,
        TypeMatchPlayer = 1, // 匹配玩家
        TypeWantLandlord = 2, // 玩家叫/抢地主
        TypePlayCardIn = 3, // 出牌
    }

    export interface Event {
        type?: number;
        match_player?: MatchPlayer;
        want_landlord?: WantLandlord;
        play_card_in?: PlayCardIn;
    }

    export const enum Webhook_Type {
        TypeNil = 0,
        TypeRegisterResult = 1, // 注册结果
        TypeLoginResult = 2, // 登录结果
        TypeMatchResult = 3, // 匹配结果
        TypeGiveCard = 4, // 发牌
        TypeAckWantLandlord = 5, // 确认叫/抢地主地主
        TypeWantLandlordOutput = 6, // 轮到下一个人叫地主
        TypeWantLandlordResult = 7, // 通知地主结果
        TypeStateChange = 8, // 游戏状态变更
        TypeAckPlayCard = 9, // 确认出牌
        TypeAckPlayCardFail = 10, // 确认出牌失败
        TypeAckPlayCardOut = 11, // 出牌
        TypeException = 999, // 异常
    }

    export interface Webhook {
        type?: number;
        exception?: Exception;
        register?: RegisterResult;
        login?: LoginResult;
        match?: MatchResult;
        give_card?: GiveCard;
        state_change?: StateChange;

        // @desc: 确认收到叫/抢地主信息
        ack_want_landlord?: Ack;
        want_landlord_output?: WantLandlordOutput;
        want_landlord_result?: WantLandlordResult;
        play_card_out?: PlayCardOut;
    }

    export interface ModelPlayer {
        id?: string;
        created_at?: number;
        updated_at?: number;
        deleted_at?: number;

        // @desc: 玩家昵称
        nickname?: string;

        // @desc: 登录用户名
        username?: string;

        // @desc: 玩家密码
        password?: string;

        // @desc: 玩家头像
        avatar?: string;

        // @desc: 最后登录时间
        last_login_at?: number;

        // @desc: 是否在线
        is_online?: boolean;

        // @desc: ip
        cur_ip_addr?: string;
        last_ip_addr?: string;
    }

    export interface ModelRoom {
        id?: string;
        created_at?: number;
        updated_at?: number;
        deleted_at?: number;

        // @desc: 房间创建者
        // @ref_to: ModelPlayer.id
        // type: uint64
        creator_id?: string;

        // @desc: 房间名称
        name?: string;

        // @desc: 房间玩家列表
        // @gotags: gorm:"json"
        // type: uint64
        player_ids?: Array<string>;
    }

    export interface ModelGame {
        id?: string;
        created_at?: number;
        updated_at?: number;
        deleted_at?: number;

        // @desc: 房间号
        // type: uint64
        room_id?: string;

        // @desc: 地主的位置
        landlord_seq?: number;

        // @desc: 当前出牌玩家的座位
        cur_player_seq?: number;

        // @desc: 上一位出牌玩家的座位
        last_player_seq?: number;

        // @desc: 叫地主次数
        want_di_zhu_times?: number;

        // @desc: 当前叫地主分数
        cur_landlord_score?: number;

        // @desc: 地主牌
        // @gotags: gorm:"json"
        landlord_cards?: Array<number>;

        // @desc: 上一位出的牌，表示上一次出的牌
        // @gotags: gorm:"json"
        last_cards?: CardSet;

        // @desc: 房间玩家列表
        // @gotags: gorm:"json"
        // type: uint64
        player_ids?: Array<string>;
        pass_num?: number;
        now_bigger_seq?: number;

        // @ref_to: GameStateChange
        state?: number;
    }

    export interface ModelGamePlayer {
        id?: string;
        created_at?: number;
        updated_at?: number;
        deleted_at?: number;
        room_id?: string;

        // @desc: 牌局ID
        // type: uint64
        game_id?: string;

        // @desc: 玩家ID
        // type: uint64
        player_id?: string;

        // @desc: 玩家在牌局中的位置，1-3
        seq?: number;

        // @desc: 玩家在牌局中的角色，地主或农民
        is_landlord?: boolean;

        // @desc: 玩家手牌
        // @gotags: gorm:"json"
        cards?: Array<number>;

        // @desc: 玩家当前手牌
        // @gotags: gorm:"json"
        cur_cards?: Array<number>;
    }

    export interface BaseGame {
        g?: ModelGame;
        gps?: Array<ModelGamePlayer>;
    }

    export interface Register {
        username?: string;
        password?: string;
    }

    export interface Login {
        username?: string;
        password?: string;
    }

    export interface MatchPlayer {
        player_id?: string;
    }

    export interface RegisterResult {
        player?: ModelPlayer;
    }

    export interface LoginResult {
        player?: ModelPlayer;
    }

    export interface MatchResult {
        players?: Array<ModelPlayer>;
        room?: ModelRoom;
    }

    export interface GiveCard {
        base_game?: BaseGame;
    }

    export interface StateChange {
        // @ref_to: GameStateChange
        state_change?: number;
    }

    export interface Exception {
        code?: number;
        message?: string;
    }

    export interface WantLandlord {
        game_id?: string;
        score?: number;
    }

    export interface WantLandlordOutput {
        // @ref_to: GameStateChange
        state_change?: number;
        cur_player_seq?: number;
        new_score?: number;
    }

    export interface WantLandlordResult {
        // @ref_to: GameStateChange
        state_change?: number;
        cur_player_seq?: number;
        new_score?: number;
        landlord_cards?: Array<number>;
    }

    export interface Ack {
        seq?: number;
    }

    export interface CardSet {
        // @ref_to: CardType
        card_type?: number;
        cards?: Array<number>;
        header?: number;
    }

    export interface PlayCardIn {
        game_id?: string;
        cur_card?: CardSet;
    }

    export interface PlayCardOut {
        // @ref_to: GameStateChange
        state_change?: number;
        next_seq?: number;
        cur_card?: CardSet;
    }

    export interface lbddzService {
    }
}

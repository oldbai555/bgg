// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lbstore.proto

package lbstore

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelFileMultiError, or nil
// if none found.
func (m *ModelFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatorUid

	// no validation rules for FileName

	// no validation rules for FileExt

	// no validation rules for ObjectKey

	// no validation rules for SignUrl

	// no validation rules for Url

	// no validation rules for FileType

	// no validation rules for Size

	if len(errors) > 0 {
		return ModelFileMultiError(errors)
	}

	return nil
}

// ModelFileMultiError is an error wrapping multiple validation errors returned
// by ModelFile.ValidateAll() if the designated constraints aren't met.
type ModelFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFileMultiError) AllErrors() []error { return m }

// ModelFileValidationError is the validation error returned by
// ModelFile.Validate if the designated constraints aren't met.
type ModelFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFileValidationError) ErrorName() string { return "ModelFileValidationError" }

// Error satisfies the builtin error interface
func (e ModelFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFileValidationError{}

// Validate checks the field values on UploadReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadReqMultiError, or nil
// if none found.
func (m *UploadReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Buf

	// no validation rules for FileName

	// no validation rules for FileExt

	if len(errors) > 0 {
		return UploadReqMultiError(errors)
	}

	return nil
}

// UploadReqMultiError is an error wrapping multiple validation errors returned
// by UploadReq.ValidateAll() if the designated constraints aren't met.
type UploadReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadReqMultiError) AllErrors() []error { return m }

// UploadReqValidationError is the validation error returned by
// UploadReq.Validate if the designated constraints aren't met.
type UploadReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadReqValidationError) ErrorName() string { return "UploadReqValidationError" }

// Error satisfies the builtin error interface
func (e UploadReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadReqValidationError{}

// Validate checks the field values on UploadRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadRspMultiError, or nil
// if none found.
func (m *UploadRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return UploadRspMultiError(errors)
	}

	return nil
}

// UploadRspMultiError is an error wrapping multiple validation errors returned
// by UploadRsp.ValidateAll() if the designated constraints aren't met.
type UploadRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRspMultiError) AllErrors() []error { return m }

// UploadRspValidationError is the validation error returned by
// UploadRsp.Validate if the designated constraints aren't met.
type UploadRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRspValidationError) ErrorName() string { return "UploadRspValidationError" }

// Error satisfies the builtin error interface
func (e UploadRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRspValidationError{}

// Validate checks the field values on GetFileListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileListReqMultiError,
// or nil if none found.
func (m *GetFileListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOptions() == nil {
		err := GetFileListReqValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileListReqValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileListReqValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileListReqValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileListReqMultiError(errors)
	}

	return nil
}

// GetFileListReqMultiError is an error wrapping multiple validation errors
// returned by GetFileListReq.ValidateAll() if the designated constraints
// aren't met.
type GetFileListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileListReqMultiError) AllErrors() []error { return m }

// GetFileListReqValidationError is the validation error returned by
// GetFileListReq.Validate if the designated constraints aren't met.
type GetFileListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileListReqValidationError) ErrorName() string { return "GetFileListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFileListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileListReqValidationError{}

// Validate checks the field values on GetFileListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileListRspMultiError,
// or nil if none found.
func (m *GetFileListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFileListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFileListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFileListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFileListRspMultiError(errors)
	}

	return nil
}

// GetFileListRspMultiError is an error wrapping multiple validation errors
// returned by GetFileListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetFileListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileListRspMultiError) AllErrors() []error { return m }

// GetFileListRspValidationError is the validation error returned by
// GetFileListRsp.Validate if the designated constraints aren't met.
type GetFileListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileListRspValidationError) ErrorName() string { return "GetFileListRspValidationError" }

// Error satisfies the builtin error interface
func (e GetFileListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileListRspValidationError{}

// Validate checks the field values on RefreshFileSignedUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshFileSignedUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshFileSignedUrlReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshFileSignedUrlReqMultiError, or nil if none found.
func (m *RefreshFileSignedUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshFileSignedUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RefreshFileSignedUrlReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshFileSignedUrlReqMultiError(errors)
	}

	return nil
}

// RefreshFileSignedUrlReqMultiError is an error wrapping multiple validation
// errors returned by RefreshFileSignedUrlReq.ValidateAll() if the designated
// constraints aren't met.
type RefreshFileSignedUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshFileSignedUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshFileSignedUrlReqMultiError) AllErrors() []error { return m }

// RefreshFileSignedUrlReqValidationError is the validation error returned by
// RefreshFileSignedUrlReq.Validate if the designated constraints aren't met.
type RefreshFileSignedUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshFileSignedUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshFileSignedUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshFileSignedUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshFileSignedUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshFileSignedUrlReqValidationError) ErrorName() string {
	return "RefreshFileSignedUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshFileSignedUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshFileSignedUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshFileSignedUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshFileSignedUrlReqValidationError{}

// Validate checks the field values on RefreshFileSignedUrlRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshFileSignedUrlRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshFileSignedUrlRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshFileSignedUrlRspMultiError, or nil if none found.
func (m *RefreshFileSignedUrlRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshFileSignedUrlRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefreshFileSignedUrlRspMultiError(errors)
	}

	return nil
}

// RefreshFileSignedUrlRspMultiError is an error wrapping multiple validation
// errors returned by RefreshFileSignedUrlRsp.ValidateAll() if the designated
// constraints aren't met.
type RefreshFileSignedUrlRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshFileSignedUrlRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshFileSignedUrlRspMultiError) AllErrors() []error { return m }

// RefreshFileSignedUrlRspValidationError is the validation error returned by
// RefreshFileSignedUrlRsp.Validate if the designated constraints aren't met.
type RefreshFileSignedUrlRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshFileSignedUrlRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshFileSignedUrlRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshFileSignedUrlRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshFileSignedUrlRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshFileSignedUrlRspValidationError) ErrorName() string {
	return "RefreshFileSignedUrlRspValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshFileSignedUrlRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshFileSignedUrlRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshFileSignedUrlRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshFileSignedUrlRspValidationError{}

// Validate checks the field values on GetSignatureReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSignatureReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSignatureReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSignatureReqMultiError, or nil if none found.
func (m *GetSignatureReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSignatureReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetSignatureReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMethod()) < 1 {
		err := GetSignatureReqValidationError{
			field:  "Method",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSignatureReqMultiError(errors)
	}

	return nil
}

// GetSignatureReqMultiError is an error wrapping multiple validation errors
// returned by GetSignatureReq.ValidateAll() if the designated constraints
// aren't met.
type GetSignatureReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSignatureReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSignatureReqMultiError) AllErrors() []error { return m }

// GetSignatureReqValidationError is the validation error returned by
// GetSignatureReq.Validate if the designated constraints aren't met.
type GetSignatureReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignatureReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignatureReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignatureReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignatureReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignatureReqValidationError) ErrorName() string { return "GetSignatureReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSignatureReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignatureReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignatureReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignatureReqValidationError{}

// Validate checks the field values on GetSignatureRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSignatureRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSignatureRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSignatureRspMultiError, or nil if none found.
func (m *GetSignatureRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSignatureRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	// no validation rules for SessionToken

	if len(errors) > 0 {
		return GetSignatureRspMultiError(errors)
	}

	return nil
}

// GetSignatureRspMultiError is an error wrapping multiple validation errors
// returned by GetSignatureRsp.ValidateAll() if the designated constraints
// aren't met.
type GetSignatureRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSignatureRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSignatureRspMultiError) AllErrors() []error { return m }

// GetSignatureRspValidationError is the validation error returned by
// GetSignatureRsp.Validate if the designated constraints aren't met.
type GetSignatureRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignatureRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignatureRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignatureRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignatureRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignatureRspValidationError) ErrorName() string { return "GetSignatureRspValidationError" }

// Error satisfies the builtin error interface
func (e GetSignatureRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignatureRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignatureRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignatureRspValidationError{}

// Validate checks the field values on ReportUploadFileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportUploadFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportUploadFileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportUploadFileReqMultiError, or nil if none found.
func (m *ReportUploadFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportUploadFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFile() == nil {
		err := ReportUploadFileReqValidationError{
			field:  "File",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportUploadFileReqValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportUploadFileReqValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportUploadFileReqValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportUploadFileReqMultiError(errors)
	}

	return nil
}

// ReportUploadFileReqMultiError is an error wrapping multiple validation
// errors returned by ReportUploadFileReq.ValidateAll() if the designated
// constraints aren't met.
type ReportUploadFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportUploadFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportUploadFileReqMultiError) AllErrors() []error { return m }

// ReportUploadFileReqValidationError is the validation error returned by
// ReportUploadFileReq.Validate if the designated constraints aren't met.
type ReportUploadFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportUploadFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportUploadFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportUploadFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportUploadFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportUploadFileReqValidationError) ErrorName() string {
	return "ReportUploadFileReqValidationError"
}

// Error satisfies the builtin error interface
func (e ReportUploadFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportUploadFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportUploadFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportUploadFileReqValidationError{}

// Validate checks the field values on ReportUploadFileRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportUploadFileRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportUploadFileRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportUploadFileRspMultiError, or nil if none found.
func (m *ReportUploadFileRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportUploadFileRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportUploadFileRspMultiError(errors)
	}

	return nil
}

// ReportUploadFileRspMultiError is an error wrapping multiple validation
// errors returned by ReportUploadFileRsp.ValidateAll() if the designated
// constraints aren't met.
type ReportUploadFileRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportUploadFileRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportUploadFileRspMultiError) AllErrors() []error { return m }

// ReportUploadFileRspValidationError is the validation error returned by
// ReportUploadFileRsp.Validate if the designated constraints aren't met.
type ReportUploadFileRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportUploadFileRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportUploadFileRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportUploadFileRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportUploadFileRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportUploadFileRspValidationError) ErrorName() string {
	return "ReportUploadFileRspValidationError"
}

// Error satisfies the builtin error interface
func (e ReportUploadFileRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportUploadFileRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportUploadFileRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportUploadFileRspValidationError{}

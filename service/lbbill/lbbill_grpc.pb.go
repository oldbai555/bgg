// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: lbbill.proto

package lbbill

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LbbillClient is the client API for Lbbill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LbbillClient interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBillSys(ctx context.Context, in *AddBillSysReq, opts ...grpc.CallOption) (*AddBillSysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBillSysList(ctx context.Context, in *DelBillSysListReq, opts ...grpc.CallOption) (*DelBillSysListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBillSys(ctx context.Context, in *UpdateBillSysReq, opts ...grpc.CallOption) (*UpdateBillSysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillSys(ctx context.Context, in *GetBillSysReq, opts ...grpc.CallOption) (*GetBillSysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillSysList(ctx context.Context, in *GetBillSysListReq, opts ...grpc.CallOption) (*GetBillSysListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBillCategorySys(ctx context.Context, in *AddBillCategorySysReq, opts ...grpc.CallOption) (*AddBillCategorySysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBillCategorySysList(ctx context.Context, in *DelBillCategorySysListReq, opts ...grpc.CallOption) (*DelBillCategorySysListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBillCategorySys(ctx context.Context, in *UpdateBillCategorySysReq, opts ...grpc.CallOption) (*UpdateBillCategorySysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategorySys(ctx context.Context, in *GetBillCategorySysReq, opts ...grpc.CallOption) (*GetBillCategorySysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategorySysList(ctx context.Context, in *GetBillCategorySysListReq, opts ...grpc.CallOption) (*GetBillCategorySysListRsp, error)
}

type lbbillClient struct {
	cc grpc.ClientConnInterface
}

func NewLbbillClient(cc grpc.ClientConnInterface) LbbillClient {
	return &lbbillClient{cc}
}

func (c *lbbillClient) AddBillSys(ctx context.Context, in *AddBillSysReq, opts ...grpc.CallOption) (*AddBillSysRsp, error) {
	out := new(AddBillSysRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/AddBillSys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) DelBillSysList(ctx context.Context, in *DelBillSysListReq, opts ...grpc.CallOption) (*DelBillSysListRsp, error) {
	out := new(DelBillSysListRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/DelBillSysList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) UpdateBillSys(ctx context.Context, in *UpdateBillSysReq, opts ...grpc.CallOption) (*UpdateBillSysRsp, error) {
	out := new(UpdateBillSysRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/UpdateBillSys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBillSys(ctx context.Context, in *GetBillSysReq, opts ...grpc.CallOption) (*GetBillSysRsp, error) {
	out := new(GetBillSysRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBillSys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBillSysList(ctx context.Context, in *GetBillSysListReq, opts ...grpc.CallOption) (*GetBillSysListRsp, error) {
	out := new(GetBillSysListRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBillSysList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) AddBillCategorySys(ctx context.Context, in *AddBillCategorySysReq, opts ...grpc.CallOption) (*AddBillCategorySysRsp, error) {
	out := new(AddBillCategorySysRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/AddBillCategorySys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) DelBillCategorySysList(ctx context.Context, in *DelBillCategorySysListReq, opts ...grpc.CallOption) (*DelBillCategorySysListRsp, error) {
	out := new(DelBillCategorySysListRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/DelBillCategorySysList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) UpdateBillCategorySys(ctx context.Context, in *UpdateBillCategorySysReq, opts ...grpc.CallOption) (*UpdateBillCategorySysRsp, error) {
	out := new(UpdateBillCategorySysRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/UpdateBillCategorySys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBillCategorySys(ctx context.Context, in *GetBillCategorySysReq, opts ...grpc.CallOption) (*GetBillCategorySysRsp, error) {
	out := new(GetBillCategorySysRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBillCategorySys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbbillClient) GetBillCategorySysList(ctx context.Context, in *GetBillCategorySysListReq, opts ...grpc.CallOption) (*GetBillCategorySysListRsp, error) {
	out := new(GetBillCategorySysListRsp)
	err := c.cc.Invoke(ctx, "/lbbill.lbbill/GetBillCategorySysList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbbillServer is the server API for Lbbill service.
// All implementations must embed UnimplementedLbbillServer
// for forward compatibility
type LbbillServer interface {
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBillSys(context.Context, *AddBillSysReq) (*AddBillSysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBillSysList(context.Context, *DelBillSysListReq) (*DelBillSysListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBillSys(context.Context, *UpdateBillSysReq) (*UpdateBillSysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillSys(context.Context, *GetBillSysReq) (*GetBillSysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillSysList(context.Context, *GetBillSysListReq) (*GetBillSysListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddBillCategorySys(context.Context, *AddBillCategorySysReq) (*AddBillCategorySysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelBillCategorySysList(context.Context, *DelBillCategorySysListReq) (*DelBillCategorySysListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateBillCategorySys(context.Context, *UpdateBillCategorySysReq) (*UpdateBillCategorySysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategorySys(context.Context, *GetBillCategorySysReq) (*GetBillCategorySysRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetBillCategorySysList(context.Context, *GetBillCategorySysListReq) (*GetBillCategorySysListRsp, error)
	mustEmbedUnimplementedLbbillServer()
}

// UnimplementedLbbillServer must be embedded to have forward compatible implementations.
type UnimplementedLbbillServer struct {
}

func (UnimplementedLbbillServer) AddBillSys(context.Context, *AddBillSysReq) (*AddBillSysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillSys not implemented")
}
func (UnimplementedLbbillServer) DelBillSysList(context.Context, *DelBillSysListReq) (*DelBillSysListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBillSysList not implemented")
}
func (UnimplementedLbbillServer) UpdateBillSys(context.Context, *UpdateBillSysReq) (*UpdateBillSysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillSys not implemented")
}
func (UnimplementedLbbillServer) GetBillSys(context.Context, *GetBillSysReq) (*GetBillSysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillSys not implemented")
}
func (UnimplementedLbbillServer) GetBillSysList(context.Context, *GetBillSysListReq) (*GetBillSysListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillSysList not implemented")
}
func (UnimplementedLbbillServer) AddBillCategorySys(context.Context, *AddBillCategorySysReq) (*AddBillCategorySysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillCategorySys not implemented")
}
func (UnimplementedLbbillServer) DelBillCategorySysList(context.Context, *DelBillCategorySysListReq) (*DelBillCategorySysListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBillCategorySysList not implemented")
}
func (UnimplementedLbbillServer) UpdateBillCategorySys(context.Context, *UpdateBillCategorySysReq) (*UpdateBillCategorySysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillCategorySys not implemented")
}
func (UnimplementedLbbillServer) GetBillCategorySys(context.Context, *GetBillCategorySysReq) (*GetBillCategorySysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillCategorySys not implemented")
}
func (UnimplementedLbbillServer) GetBillCategorySysList(context.Context, *GetBillCategorySysListReq) (*GetBillCategorySysListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillCategorySysList not implemented")
}
func (UnimplementedLbbillServer) mustEmbedUnimplementedLbbillServer() {}

// UnsafeLbbillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LbbillServer will
// result in compilation errors.
type UnsafeLbbillServer interface {
	mustEmbedUnimplementedLbbillServer()
}

func RegisterLbbillServer(s grpc.ServiceRegistrar, srv LbbillServer) {
	s.RegisterService(&Lbbill_ServiceDesc, srv)
}

func _Lbbill_AddBillSys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBillSysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).AddBillSys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/AddBillSys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).AddBillSys(ctx, req.(*AddBillSysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_DelBillSysList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBillSysListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).DelBillSysList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/DelBillSysList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).DelBillSysList(ctx, req.(*DelBillSysListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_UpdateBillSys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillSysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).UpdateBillSys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/UpdateBillSys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).UpdateBillSys(ctx, req.(*UpdateBillSysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBillSys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillSysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBillSys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBillSys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBillSys(ctx, req.(*GetBillSysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBillSysList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillSysListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBillSysList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBillSysList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBillSysList(ctx, req.(*GetBillSysListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_AddBillCategorySys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBillCategorySysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).AddBillCategorySys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/AddBillCategorySys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).AddBillCategorySys(ctx, req.(*AddBillCategorySysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_DelBillCategorySysList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBillCategorySysListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).DelBillCategorySysList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/DelBillCategorySysList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).DelBillCategorySysList(ctx, req.(*DelBillCategorySysListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_UpdateBillCategorySys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillCategorySysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).UpdateBillCategorySys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/UpdateBillCategorySys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).UpdateBillCategorySys(ctx, req.(*UpdateBillCategorySysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBillCategorySys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillCategorySysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBillCategorySys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBillCategorySys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBillCategorySys(ctx, req.(*GetBillCategorySysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbbill_GetBillCategorySysList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillCategorySysListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbbillServer).GetBillCategorySysList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbbill.lbbill/GetBillCategorySysList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbbillServer).GetBillCategorySysList(ctx, req.(*GetBillCategorySysListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lbbill_ServiceDesc is the grpc.ServiceDesc for Lbbill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lbbill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbbill.lbbill",
	HandlerType: (*LbbillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBillSys",
			Handler:    _Lbbill_AddBillSys_Handler,
		},
		{
			MethodName: "DelBillSysList",
			Handler:    _Lbbill_DelBillSysList_Handler,
		},
		{
			MethodName: "UpdateBillSys",
			Handler:    _Lbbill_UpdateBillSys_Handler,
		},
		{
			MethodName: "GetBillSys",
			Handler:    _Lbbill_GetBillSys_Handler,
		},
		{
			MethodName: "GetBillSysList",
			Handler:    _Lbbill_GetBillSysList_Handler,
		},
		{
			MethodName: "AddBillCategorySys",
			Handler:    _Lbbill_AddBillCategorySys_Handler,
		},
		{
			MethodName: "DelBillCategorySysList",
			Handler:    _Lbbill_DelBillCategorySysList_Handler,
		},
		{
			MethodName: "UpdateBillCategorySys",
			Handler:    _Lbbill_UpdateBillCategorySys_Handler,
		},
		{
			MethodName: "GetBillCategorySys",
			Handler:    _Lbbill_GetBillCategorySys_Handler,
		},
		{
			MethodName: "GetBillCategorySysList",
			Handler:    _Lbbill_GetBillCategorySysList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbbill.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lbbill.proto

package lbbill

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelBill with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelBill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelBill with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelBillMultiError, or nil
// if none found.
func (m *ModelBill) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelBill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatorUid

	// no validation rules for Amount

	// no validation rules for CategoryId

	// no validation rules for DateUnix

	// no validation rules for RootCategory

	// no validation rules for Remark

	if len(errors) > 0 {
		return ModelBillMultiError(errors)
	}

	return nil
}

// ModelBillMultiError is an error wrapping multiple validation errors returned
// by ModelBill.ValidateAll() if the designated constraints aren't met.
type ModelBillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelBillMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelBillMultiError) AllErrors() []error { return m }

// ModelBillValidationError is the validation error returned by
// ModelBill.Validate if the designated constraints aren't met.
type ModelBillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelBillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelBillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelBillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelBillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelBillValidationError) ErrorName() string { return "ModelBillValidationError" }

// Error satisfies the builtin error interface
func (e ModelBillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelBill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelBillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelBillValidationError{}

// Validate checks the field values on ModelBillCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelBillCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelBillCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelBillCategoryMultiError, or nil if none found.
func (m *ModelBillCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelBillCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Name

	// no validation rules for RootCategory

	if len(errors) > 0 {
		return ModelBillCategoryMultiError(errors)
	}

	return nil
}

// ModelBillCategoryMultiError is an error wrapping multiple validation errors
// returned by ModelBillCategory.ValidateAll() if the designated constraints
// aren't met.
type ModelBillCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelBillCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelBillCategoryMultiError) AllErrors() []error { return m }

// ModelBillCategoryValidationError is the validation error returned by
// ModelBillCategory.Validate if the designated constraints aren't met.
type ModelBillCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelBillCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelBillCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelBillCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelBillCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelBillCategoryValidationError) ErrorName() string {
	return "ModelBillCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e ModelBillCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelBillCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelBillCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelBillCategoryValidationError{}

// Validate checks the field values on AddBillSysReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBillSysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillSysReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBillSysReqMultiError, or
// nil if none found.
func (m *AddBillSysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillSysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := AddBillSysReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillSysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillSysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillSysReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillSysReqMultiError(errors)
	}

	return nil
}

// AddBillSysReqMultiError is an error wrapping multiple validation errors
// returned by AddBillSysReq.ValidateAll() if the designated constraints
// aren't met.
type AddBillSysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillSysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillSysReqMultiError) AllErrors() []error { return m }

// AddBillSysReqValidationError is the validation error returned by
// AddBillSysReq.Validate if the designated constraints aren't met.
type AddBillSysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillSysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillSysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillSysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillSysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillSysReqValidationError) ErrorName() string { return "AddBillSysReqValidationError" }

// Error satisfies the builtin error interface
func (e AddBillSysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillSysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillSysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillSysReqValidationError{}

// Validate checks the field values on AddBillSysRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBillSysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillSysRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBillSysRspMultiError, or
// nil if none found.
func (m *AddBillSysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillSysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillSysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillSysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillSysRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillSysRspMultiError(errors)
	}

	return nil
}

// AddBillSysRspMultiError is an error wrapping multiple validation errors
// returned by AddBillSysRsp.ValidateAll() if the designated constraints
// aren't met.
type AddBillSysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillSysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillSysRspMultiError) AllErrors() []error { return m }

// AddBillSysRspValidationError is the validation error returned by
// AddBillSysRsp.Validate if the designated constraints aren't met.
type AddBillSysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillSysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillSysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillSysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillSysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillSysRspValidationError) ErrorName() string { return "AddBillSysRspValidationError" }

// Error satisfies the builtin error interface
func (e AddBillSysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillSysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillSysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillSysRspValidationError{}

// Validate checks the field values on UpdateBillSysReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillSysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillSysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillSysReqMultiError, or nil if none found.
func (m *UpdateBillSysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillSysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateBillSysReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillSysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillSysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillSysReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBillSysReqMultiError(errors)
	}

	return nil
}

// UpdateBillSysReqMultiError is an error wrapping multiple validation errors
// returned by UpdateBillSysReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateBillSysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillSysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillSysReqMultiError) AllErrors() []error { return m }

// UpdateBillSysReqValidationError is the validation error returned by
// UpdateBillSysReq.Validate if the designated constraints aren't met.
type UpdateBillSysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillSysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillSysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillSysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillSysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillSysReqValidationError) ErrorName() string { return "UpdateBillSysReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBillSysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillSysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillSysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillSysReqValidationError{}

// Validate checks the field values on UpdateBillSysRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillSysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillSysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillSysRspMultiError, or nil if none found.
func (m *UpdateBillSysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillSysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBillSysRspMultiError(errors)
	}

	return nil
}

// UpdateBillSysRspMultiError is an error wrapping multiple validation errors
// returned by UpdateBillSysRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateBillSysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillSysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillSysRspMultiError) AllErrors() []error { return m }

// UpdateBillSysRspValidationError is the validation error returned by
// UpdateBillSysRsp.Validate if the designated constraints aren't met.
type UpdateBillSysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillSysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillSysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillSysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillSysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillSysRspValidationError) ErrorName() string { return "UpdateBillSysRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBillSysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillSysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillSysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillSysRspValidationError{}

// Validate checks the field values on DelBillSysListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelBillSysListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillSysListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelBillSysListReqMultiError, or nil if none found.
func (m *DelBillSysListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillSysListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := DelBillSysListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelBillSysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelBillSysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelBillSysListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelBillSysListReqMultiError(errors)
	}

	return nil
}

// DelBillSysListReqMultiError is an error wrapping multiple validation errors
// returned by DelBillSysListReq.ValidateAll() if the designated constraints
// aren't met.
type DelBillSysListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillSysListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillSysListReqMultiError) AllErrors() []error { return m }

// DelBillSysListReqValidationError is the validation error returned by
// DelBillSysListReq.Validate if the designated constraints aren't met.
type DelBillSysListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillSysListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillSysListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillSysListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillSysListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillSysListReqValidationError) ErrorName() string {
	return "DelBillSysListReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelBillSysListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillSysListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillSysListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillSysListReqValidationError{}

// Validate checks the field values on DelBillSysListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelBillSysListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillSysListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelBillSysListRspMultiError, or nil if none found.
func (m *DelBillSysListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillSysListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelBillSysListRspMultiError(errors)
	}

	return nil
}

// DelBillSysListRspMultiError is an error wrapping multiple validation errors
// returned by DelBillSysListRsp.ValidateAll() if the designated constraints
// aren't met.
type DelBillSysListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillSysListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillSysListRspMultiError) AllErrors() []error { return m }

// DelBillSysListRspValidationError is the validation error returned by
// DelBillSysListRsp.Validate if the designated constraints aren't met.
type DelBillSysListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillSysListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillSysListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillSysListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillSysListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillSysListRspValidationError) ErrorName() string {
	return "DelBillSysListRspValidationError"
}

// Error satisfies the builtin error interface
func (e DelBillSysListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillSysListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillSysListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillSysListRspValidationError{}

// Validate checks the field values on GetBillSysReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBillSysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillSysReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBillSysReqMultiError, or
// nil if none found.
func (m *GetBillSysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillSysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetBillSysReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBillSysReqMultiError(errors)
	}

	return nil
}

// GetBillSysReqMultiError is an error wrapping multiple validation errors
// returned by GetBillSysReq.ValidateAll() if the designated constraints
// aren't met.
type GetBillSysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillSysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillSysReqMultiError) AllErrors() []error { return m }

// GetBillSysReqValidationError is the validation error returned by
// GetBillSysReq.Validate if the designated constraints aren't met.
type GetBillSysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillSysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillSysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillSysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillSysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillSysReqValidationError) ErrorName() string { return "GetBillSysReqValidationError" }

// Error satisfies the builtin error interface
func (e GetBillSysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillSysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillSysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillSysReqValidationError{}

// Validate checks the field values on GetBillSysRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBillSysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillSysRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBillSysRspMultiError, or
// nil if none found.
func (m *GetBillSysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillSysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillSysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillSysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillSysRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillSysRspMultiError(errors)
	}

	return nil
}

// GetBillSysRspMultiError is an error wrapping multiple validation errors
// returned by GetBillSysRsp.ValidateAll() if the designated constraints
// aren't met.
type GetBillSysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillSysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillSysRspMultiError) AllErrors() []error { return m }

// GetBillSysRspValidationError is the validation error returned by
// GetBillSysRsp.Validate if the designated constraints aren't met.
type GetBillSysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillSysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillSysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillSysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillSysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillSysRspValidationError) ErrorName() string { return "GetBillSysRspValidationError" }

// Error satisfies the builtin error interface
func (e GetBillSysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillSysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillSysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillSysRspValidationError{}

// Validate checks the field values on GetBillSysListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBillSysListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillSysListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillSysListReqMultiError, or nil if none found.
func (m *GetBillSysListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillSysListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetBillSysListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillSysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillSysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillSysListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillSysListReqMultiError(errors)
	}

	return nil
}

// GetBillSysListReqMultiError is an error wrapping multiple validation errors
// returned by GetBillSysListReq.ValidateAll() if the designated constraints
// aren't met.
type GetBillSysListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillSysListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillSysListReqMultiError) AllErrors() []error { return m }

// GetBillSysListReqValidationError is the validation error returned by
// GetBillSysListReq.Validate if the designated constraints aren't met.
type GetBillSysListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillSysListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillSysListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillSysListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillSysListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillSysListReqValidationError) ErrorName() string {
	return "GetBillSysListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillSysListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillSysListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillSysListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillSysListReqValidationError{}

// Validate checks the field values on GetBillSysListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBillSysListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillSysListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillSysListRspMultiError, or nil if none found.
func (m *GetBillSysListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillSysListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillSysListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillSysListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillSysListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBillSysListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBillSysListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBillSysListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBillSysListRspMultiError(errors)
	}

	return nil
}

// GetBillSysListRspMultiError is an error wrapping multiple validation errors
// returned by GetBillSysListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetBillSysListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillSysListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillSysListRspMultiError) AllErrors() []error { return m }

// GetBillSysListRspValidationError is the validation error returned by
// GetBillSysListRsp.Validate if the designated constraints aren't met.
type GetBillSysListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillSysListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillSysListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillSysListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillSysListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillSysListRspValidationError) ErrorName() string {
	return "GetBillSysListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillSysListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillSysListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillSysListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillSysListRspValidationError{}

// Validate checks the field values on AddBillCategorySysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBillCategorySysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillCategorySysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBillCategorySysReqMultiError, or nil if none found.
func (m *AddBillCategorySysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillCategorySysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := AddBillCategorySysReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillCategorySysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillCategorySysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillCategorySysReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillCategorySysReqMultiError(errors)
	}

	return nil
}

// AddBillCategorySysReqMultiError is an error wrapping multiple validation
// errors returned by AddBillCategorySysReq.ValidateAll() if the designated
// constraints aren't met.
type AddBillCategorySysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillCategorySysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillCategorySysReqMultiError) AllErrors() []error { return m }

// AddBillCategorySysReqValidationError is the validation error returned by
// AddBillCategorySysReq.Validate if the designated constraints aren't met.
type AddBillCategorySysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillCategorySysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillCategorySysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillCategorySysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillCategorySysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillCategorySysReqValidationError) ErrorName() string {
	return "AddBillCategorySysReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddBillCategorySysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillCategorySysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillCategorySysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillCategorySysReqValidationError{}

// Validate checks the field values on AddBillCategorySysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBillCategorySysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBillCategorySysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBillCategorySysRspMultiError, or nil if none found.
func (m *AddBillCategorySysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBillCategorySysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBillCategorySysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBillCategorySysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBillCategorySysRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBillCategorySysRspMultiError(errors)
	}

	return nil
}

// AddBillCategorySysRspMultiError is an error wrapping multiple validation
// errors returned by AddBillCategorySysRsp.ValidateAll() if the designated
// constraints aren't met.
type AddBillCategorySysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBillCategorySysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBillCategorySysRspMultiError) AllErrors() []error { return m }

// AddBillCategorySysRspValidationError is the validation error returned by
// AddBillCategorySysRsp.Validate if the designated constraints aren't met.
type AddBillCategorySysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBillCategorySysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBillCategorySysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBillCategorySysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBillCategorySysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBillCategorySysRspValidationError) ErrorName() string {
	return "AddBillCategorySysRspValidationError"
}

// Error satisfies the builtin error interface
func (e AddBillCategorySysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBillCategorySysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBillCategorySysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBillCategorySysRspValidationError{}

// Validate checks the field values on UpdateBillCategorySysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillCategorySysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillCategorySysReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillCategorySysReqMultiError, or nil if none found.
func (m *UpdateBillCategorySysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillCategorySysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateBillCategorySysReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillCategorySysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillCategorySysReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillCategorySysReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBillCategorySysReqMultiError(errors)
	}

	return nil
}

// UpdateBillCategorySysReqMultiError is an error wrapping multiple validation
// errors returned by UpdateBillCategorySysReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillCategorySysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillCategorySysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillCategorySysReqMultiError) AllErrors() []error { return m }

// UpdateBillCategorySysReqValidationError is the validation error returned by
// UpdateBillCategorySysReq.Validate if the designated constraints aren't met.
type UpdateBillCategorySysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillCategorySysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillCategorySysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillCategorySysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillCategorySysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillCategorySysReqValidationError) ErrorName() string {
	return "UpdateBillCategorySysReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillCategorySysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillCategorySysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillCategorySysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillCategorySysReqValidationError{}

// Validate checks the field values on UpdateBillCategorySysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillCategorySysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillCategorySysRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillCategorySysRspMultiError, or nil if none found.
func (m *UpdateBillCategorySysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillCategorySysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBillCategorySysRspMultiError(errors)
	}

	return nil
}

// UpdateBillCategorySysRspMultiError is an error wrapping multiple validation
// errors returned by UpdateBillCategorySysRsp.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillCategorySysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillCategorySysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillCategorySysRspMultiError) AllErrors() []error { return m }

// UpdateBillCategorySysRspValidationError is the validation error returned by
// UpdateBillCategorySysRsp.Validate if the designated constraints aren't met.
type UpdateBillCategorySysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillCategorySysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillCategorySysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillCategorySysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillCategorySysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillCategorySysRspValidationError) ErrorName() string {
	return "UpdateBillCategorySysRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillCategorySysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillCategorySysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillCategorySysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillCategorySysRspValidationError{}

// Validate checks the field values on DelBillCategorySysListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelBillCategorySysListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillCategorySysListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelBillCategorySysListReqMultiError, or nil if none found.
func (m *DelBillCategorySysListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillCategorySysListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := DelBillCategorySysListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelBillCategorySysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelBillCategorySysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelBillCategorySysListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelBillCategorySysListReqMultiError(errors)
	}

	return nil
}

// DelBillCategorySysListReqMultiError is an error wrapping multiple validation
// errors returned by DelBillCategorySysListReq.ValidateAll() if the
// designated constraints aren't met.
type DelBillCategorySysListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillCategorySysListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillCategorySysListReqMultiError) AllErrors() []error { return m }

// DelBillCategorySysListReqValidationError is the validation error returned by
// DelBillCategorySysListReq.Validate if the designated constraints aren't met.
type DelBillCategorySysListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillCategorySysListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillCategorySysListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillCategorySysListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillCategorySysListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillCategorySysListReqValidationError) ErrorName() string {
	return "DelBillCategorySysListReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelBillCategorySysListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillCategorySysListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillCategorySysListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillCategorySysListReqValidationError{}

// Validate checks the field values on DelBillCategorySysListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelBillCategorySysListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelBillCategorySysListRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelBillCategorySysListRspMultiError, or nil if none found.
func (m *DelBillCategorySysListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelBillCategorySysListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelBillCategorySysListRspMultiError(errors)
	}

	return nil
}

// DelBillCategorySysListRspMultiError is an error wrapping multiple validation
// errors returned by DelBillCategorySysListRsp.ValidateAll() if the
// designated constraints aren't met.
type DelBillCategorySysListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelBillCategorySysListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelBillCategorySysListRspMultiError) AllErrors() []error { return m }

// DelBillCategorySysListRspValidationError is the validation error returned by
// DelBillCategorySysListRsp.Validate if the designated constraints aren't met.
type DelBillCategorySysListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelBillCategorySysListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelBillCategorySysListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelBillCategorySysListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelBillCategorySysListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelBillCategorySysListRspValidationError) ErrorName() string {
	return "DelBillCategorySysListRspValidationError"
}

// Error satisfies the builtin error interface
func (e DelBillCategorySysListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelBillCategorySysListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelBillCategorySysListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelBillCategorySysListRspValidationError{}

// Validate checks the field values on GetBillCategorySysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategorySysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategorySysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategorySysReqMultiError, or nil if none found.
func (m *GetBillCategorySysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategorySysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetBillCategorySysReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBillCategorySysReqMultiError(errors)
	}

	return nil
}

// GetBillCategorySysReqMultiError is an error wrapping multiple validation
// errors returned by GetBillCategorySysReq.ValidateAll() if the designated
// constraints aren't met.
type GetBillCategorySysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategorySysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategorySysReqMultiError) AllErrors() []error { return m }

// GetBillCategorySysReqValidationError is the validation error returned by
// GetBillCategorySysReq.Validate if the designated constraints aren't met.
type GetBillCategorySysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategorySysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategorySysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategorySysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategorySysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategorySysReqValidationError) ErrorName() string {
	return "GetBillCategorySysReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategorySysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategorySysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategorySysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategorySysReqValidationError{}

// Validate checks the field values on GetBillCategorySysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategorySysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategorySysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategorySysRspMultiError, or nil if none found.
func (m *GetBillCategorySysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategorySysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillCategorySysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillCategorySysRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillCategorySysRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillCategorySysRspMultiError(errors)
	}

	return nil
}

// GetBillCategorySysRspMultiError is an error wrapping multiple validation
// errors returned by GetBillCategorySysRsp.ValidateAll() if the designated
// constraints aren't met.
type GetBillCategorySysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategorySysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategorySysRspMultiError) AllErrors() []error { return m }

// GetBillCategorySysRspValidationError is the validation error returned by
// GetBillCategorySysRsp.Validate if the designated constraints aren't met.
type GetBillCategorySysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategorySysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategorySysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategorySysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategorySysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategorySysRspValidationError) ErrorName() string {
	return "GetBillCategorySysRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategorySysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategorySysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategorySysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategorySysRspValidationError{}

// Validate checks the field values on GetBillCategorySysListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategorySysListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategorySysListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategorySysListReqMultiError, or nil if none found.
func (m *GetBillCategorySysListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategorySysListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetBillCategorySysListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillCategorySysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillCategorySysListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillCategorySysListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillCategorySysListReqMultiError(errors)
	}

	return nil
}

// GetBillCategorySysListReqMultiError is an error wrapping multiple validation
// errors returned by GetBillCategorySysListReq.ValidateAll() if the
// designated constraints aren't met.
type GetBillCategorySysListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategorySysListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategorySysListReqMultiError) AllErrors() []error { return m }

// GetBillCategorySysListReqValidationError is the validation error returned by
// GetBillCategorySysListReq.Validate if the designated constraints aren't met.
type GetBillCategorySysListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategorySysListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategorySysListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategorySysListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategorySysListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategorySysListReqValidationError) ErrorName() string {
	return "GetBillCategorySysListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategorySysListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategorySysListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategorySysListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategorySysListReqValidationError{}

// Validate checks the field values on GetBillCategorySysListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillCategorySysListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillCategorySysListRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillCategorySysListRspMultiError, or nil if none found.
func (m *GetBillCategorySysListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillCategorySysListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillCategorySysListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillCategorySysListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillCategorySysListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBillCategorySysListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBillCategorySysListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBillCategorySysListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBillCategorySysListRspMultiError(errors)
	}

	return nil
}

// GetBillCategorySysListRspMultiError is an error wrapping multiple validation
// errors returned by GetBillCategorySysListRsp.ValidateAll() if the
// designated constraints aren't met.
type GetBillCategorySysListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillCategorySysListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillCategorySysListRspMultiError) AllErrors() []error { return m }

// GetBillCategorySysListRspValidationError is the validation error returned by
// GetBillCategorySysListRsp.Validate if the designated constraints aren't met.
type GetBillCategorySysListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillCategorySysListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillCategorySysListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillCategorySysListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillCategorySysListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillCategorySysListRspValidationError) ErrorName() string {
	return "GetBillCategorySysListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillCategorySysListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillCategorySysListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillCategorySysListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillCategorySysListRspValidationError{}

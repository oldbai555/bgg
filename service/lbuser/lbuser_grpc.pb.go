// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: lbuser.proto

package lbuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LbuserClient is the client API for Lbuser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LbuserClient interface {
	// @desc: 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// @desc: 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error)
	// @desc: 获取登录用户的信息
	GetLoginUser(ctx context.Context, in *GetLoginUserReq, opts ...grpc.CallOption) (*GetLoginUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error: 更新登陆的用户信息
	UpdateLoginUserInfo(ctx context.Context, in *UpdateLoginUserInfoReq, opts ...grpc.CallOption) (*UpdateLoginUserInfoRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateUserNameWithRole(ctx context.Context, in *UpdateUserNameWithRoleReq, opts ...grpc.CallOption) (*UpdateUserNameWithRoleRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRsp, error)
	// @cat: front
	// @name:
	// @desc:
	// @error:
	GetFrontUser(ctx context.Context, in *GetFrontUserReq, opts ...grpc.CallOption) (*GetLoginUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelUserList(ctx context.Context, in *DelUserListReq, opts ...grpc.CallOption) (*DelUserListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListRsp, error)
}

type lbuserClient struct {
	cc grpc.ClientConnInterface
}

func NewLbuserClient(cc grpc.ClientConnInterface) LbuserClient {
	return &lbuserClient{cc}
}

func (c *lbuserClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error) {
	out := new(LogoutRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) GetLoginUser(ctx context.Context, in *GetLoginUserReq, opts ...grpc.CallOption) (*GetLoginUserRsp, error) {
	out := new(GetLoginUserRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/GetLoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) UpdateLoginUserInfo(ctx context.Context, in *UpdateLoginUserInfoReq, opts ...grpc.CallOption) (*UpdateLoginUserInfoRsp, error) {
	out := new(UpdateLoginUserInfoRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/UpdateLoginUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) UpdateUserNameWithRole(ctx context.Context, in *UpdateUserNameWithRoleReq, opts ...grpc.CallOption) (*UpdateUserNameWithRoleRsp, error) {
	out := new(UpdateUserNameWithRoleRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/UpdateUserNameWithRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRsp, error) {
	out := new(ResetPasswordRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) GetFrontUser(ctx context.Context, in *GetFrontUserReq, opts ...grpc.CallOption) (*GetLoginUserRsp, error) {
	out := new(GetLoginUserRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/GetFrontUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error) {
	out := new(AddUserRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) DelUserList(ctx context.Context, in *DelUserListReq, opts ...grpc.CallOption) (*DelUserListRsp, error) {
	out := new(DelUserListRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/DelUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRsp, error) {
	out := new(UpdateUserRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRsp, error) {
	out := new(GetUserRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbuserClient) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListRsp, error) {
	out := new(GetUserListRsp)
	err := c.cc.Invoke(ctx, "/lbuser.lbuser/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbuserServer is the server API for Lbuser service.
// All implementations must embed UnimplementedLbuserServer
// for forward compatibility
type LbuserServer interface {
	// @desc: 登录
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// @desc: 登出
	Logout(context.Context, *LogoutReq) (*LogoutRsp, error)
	// @desc: 获取登录用户的信息
	GetLoginUser(context.Context, *GetLoginUserReq) (*GetLoginUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error: 更新登陆的用户信息
	UpdateLoginUserInfo(context.Context, *UpdateLoginUserInfoReq) (*UpdateLoginUserInfoRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateUserNameWithRole(context.Context, *UpdateUserNameWithRoleReq) (*UpdateUserNameWithRoleRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRsp, error)
	// @cat: front
	// @name:
	// @desc:
	// @error:
	GetFrontUser(context.Context, *GetFrontUserReq) (*GetLoginUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	AddUser(context.Context, *AddUserReq) (*AddUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	DelUserList(context.Context, *DelUserListReq) (*DelUserListRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetUser(context.Context, *GetUserReq) (*GetUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	GetUserList(context.Context, *GetUserListReq) (*GetUserListRsp, error)
	mustEmbedUnimplementedLbuserServer()
}

// UnimplementedLbuserServer must be embedded to have forward compatible implementations.
type UnimplementedLbuserServer struct {
}

func (UnimplementedLbuserServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLbuserServer) Logout(context.Context, *LogoutReq) (*LogoutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedLbuserServer) GetLoginUser(context.Context, *GetLoginUserReq) (*GetLoginUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginUser not implemented")
}
func (UnimplementedLbuserServer) UpdateLoginUserInfo(context.Context, *UpdateLoginUserInfoReq) (*UpdateLoginUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginUserInfo not implemented")
}
func (UnimplementedLbuserServer) UpdateUserNameWithRole(context.Context, *UpdateUserNameWithRoleReq) (*UpdateUserNameWithRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNameWithRole not implemented")
}
func (UnimplementedLbuserServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedLbuserServer) GetFrontUser(context.Context, *GetFrontUserReq) (*GetLoginUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontUser not implemented")
}
func (UnimplementedLbuserServer) AddUser(context.Context, *AddUserReq) (*AddUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedLbuserServer) DelUserList(context.Context, *DelUserListReq) (*DelUserListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserList not implemented")
}
func (UnimplementedLbuserServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLbuserServer) GetUser(context.Context, *GetUserReq) (*GetUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLbuserServer) GetUserList(context.Context, *GetUserListReq) (*GetUserListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedLbuserServer) mustEmbedUnimplementedLbuserServer() {}

// UnsafeLbuserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LbuserServer will
// result in compilation errors.
type UnsafeLbuserServer interface {
	mustEmbedUnimplementedLbuserServer()
}

func RegisterLbuserServer(s grpc.ServiceRegistrar, srv LbuserServer) {
	s.RegisterService(&Lbuser_ServiceDesc, srv)
}

func _Lbuser_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_GetLoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).GetLoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/GetLoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).GetLoginUser(ctx, req.(*GetLoginUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_UpdateLoginUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).UpdateLoginUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/UpdateLoginUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).UpdateLoginUserInfo(ctx, req.(*UpdateLoginUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_UpdateUserNameWithRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameWithRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).UpdateUserNameWithRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/UpdateUserNameWithRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).UpdateUserNameWithRole(ctx, req.(*UpdateUserNameWithRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_GetFrontUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).GetFrontUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/GetFrontUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).GetFrontUser(ctx, req.(*GetFrontUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_DelUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).DelUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/DelUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).DelUserList(ctx, req.(*DelUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbuser_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbuserServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbuser.lbuser/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbuserServer).GetUserList(ctx, req.(*GetUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lbuser_ServiceDesc is the grpc.ServiceDesc for Lbuser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lbuser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbuser.lbuser",
	HandlerType: (*LbuserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Lbuser_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Lbuser_Logout_Handler,
		},
		{
			MethodName: "GetLoginUser",
			Handler:    _Lbuser_GetLoginUser_Handler,
		},
		{
			MethodName: "UpdateLoginUserInfo",
			Handler:    _Lbuser_UpdateLoginUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserNameWithRole",
			Handler:    _Lbuser_UpdateUserNameWithRole_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Lbuser_ResetPassword_Handler,
		},
		{
			MethodName: "GetFrontUser",
			Handler:    _Lbuser_GetFrontUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Lbuser_AddUser_Handler,
		},
		{
			MethodName: "DelUserList",
			Handler:    _Lbuser_DelUserList_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Lbuser_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Lbuser_GetUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _Lbuser_GetUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbuser.proto",
}

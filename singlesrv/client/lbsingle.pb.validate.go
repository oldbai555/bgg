// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lbsingle.proto

package client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NsqMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NsqMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NsqMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NsqMsgMultiError, or nil if none found.
func (m *NsqMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *NsqMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CorpId

	// no validation rules for ReqId

	// no validation rules for Data

	if len(errors) > 0 {
		return NsqMsgMultiError(errors)
	}

	return nil
}

// NsqMsgMultiError is an error wrapping multiple validation errors returned by
// NsqMsg.ValidateAll() if the designated constraints aren't met.
type NsqMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NsqMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NsqMsgMultiError) AllErrors() []error { return m }

// NsqMsgValidationError is the validation error returned by NsqMsg.Validate if
// the designated constraints aren't met.
type NsqMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NsqMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NsqMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NsqMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NsqMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NsqMsgValidationError) ErrorName() string { return "NsqMsgValidationError" }

// Error satisfies the builtin error interface
func (e NsqMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNsqMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NsqMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NsqMsgValidationError{}

// Validate checks the field values on WebsocketMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebsocketMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsocketMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebsocketMsgMultiError, or
// nil if none found.
func (m *WebsocketMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsocketMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for ErrMsg

	if all {
		switch v := interface{}(m.GetChatMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "ChatMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "ChatMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsocketMsgValidationError{
				field:  "ChatMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsocketMsgValidationError{
				field:  "Login",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJoinChatRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "JoinChatRoom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "JoinChatRoom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinChatRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsocketMsgValidationError{
				field:  "JoinChatRoom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLeaveChatRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "LeaveChatRoom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsocketMsgValidationError{
					field:  "LeaveChatRoom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeaveChatRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsocketMsgValidationError{
				field:  "LeaveChatRoom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebsocketMsgMultiError(errors)
	}

	return nil
}

// WebsocketMsgMultiError is an error wrapping multiple validation errors
// returned by WebsocketMsg.ValidateAll() if the designated constraints aren't met.
type WebsocketMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsocketMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsocketMsgMultiError) AllErrors() []error { return m }

// WebsocketMsgValidationError is the validation error returned by
// WebsocketMsg.Validate if the designated constraints aren't met.
type WebsocketMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsocketMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsocketMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsocketMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsocketMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsocketMsgValidationError) ErrorName() string { return "WebsocketMsgValidationError" }

// Error satisfies the builtin error interface
func (e WebsocketMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsocketMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsocketMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsocketMsgValidationError{}

// Validate checks the field values on MqSyncFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MqSyncFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MqSyncFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MqSyncFileMultiError, or
// nil if none found.
func (m *MqSyncFile) ValidateAll() error {
	return m.validate(true)
}

func (m *MqSyncFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFileList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MqSyncFileValidationError{
						field:  fmt.Sprintf("FileList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MqSyncFileValidationError{
						field:  fmt.Sprintf("FileList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MqSyncFileValidationError{
					field:  fmt.Sprintf("FileList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MqSyncFileMultiError(errors)
	}

	return nil
}

// MqSyncFileMultiError is an error wrapping multiple validation errors
// returned by MqSyncFile.ValidateAll() if the designated constraints aren't met.
type MqSyncFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MqSyncFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MqSyncFileMultiError) AllErrors() []error { return m }

// MqSyncFileValidationError is the validation error returned by
// MqSyncFile.Validate if the designated constraints aren't met.
type MqSyncFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MqSyncFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MqSyncFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MqSyncFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MqSyncFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MqSyncFileValidationError) ErrorName() string { return "MqSyncFileValidationError" }

// Error satisfies the builtin error interface
func (e MqSyncFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMqSyncFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MqSyncFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MqSyncFileValidationError{}

// Validate checks the field values on MqCacheAllFile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MqCacheAllFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MqCacheAllFile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MqCacheAllFileMultiError,
// or nil if none found.
func (m *MqCacheAllFile) ValidateAll() error {
	return m.validate(true)
}

func (m *MqCacheAllFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MqCacheAllFileMultiError(errors)
	}

	return nil
}

// MqCacheAllFileMultiError is an error wrapping multiple validation errors
// returned by MqCacheAllFile.ValidateAll() if the designated constraints
// aren't met.
type MqCacheAllFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MqCacheAllFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MqCacheAllFileMultiError) AllErrors() []error { return m }

// MqCacheAllFileValidationError is the validation error returned by
// MqCacheAllFile.Validate if the designated constraints aren't met.
type MqCacheAllFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MqCacheAllFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MqCacheAllFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MqCacheAllFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MqCacheAllFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MqCacheAllFileValidationError) ErrorName() string { return "MqCacheAllFileValidationError" }

// Error satisfies the builtin error interface
func (e MqCacheAllFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMqCacheAllFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MqCacheAllFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MqCacheAllFileValidationError{}

// Validate checks the field values on ModelFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelFileMultiError, or nil
// if none found.
func (m *ModelFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatorId

	// no validation rules for Size

	// no validation rules for Name

	// no validation rules for Rename

	// no validation rules for Path

	// no validation rules for Md5

	// no validation rules for SortUrl

	// no validation rules for State

	if len(errors) > 0 {
		return ModelFileMultiError(errors)
	}

	return nil
}

// ModelFileMultiError is an error wrapping multiple validation errors returned
// by ModelFile.ValidateAll() if the designated constraints aren't met.
type ModelFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFileMultiError) AllErrors() []error { return m }

// ModelFileValidationError is the validation error returned by
// ModelFile.Validate if the designated constraints aren't met.
type ModelFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFileValidationError) ErrorName() string { return "ModelFileValidationError" }

// Error satisfies the builtin error interface
func (e ModelFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFileValidationError{}

// Validate checks the field values on ModelUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelUserMultiError, or nil
// if none found.
func (m *ModelUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Avatar

	// no validation rules for Nickname

	// no validation rules for Email

	// no validation rules for Github

	// no validation rules for Desc

	// no validation rules for Role

	if len(errors) > 0 {
		return ModelUserMultiError(errors)
	}

	return nil
}

// ModelUserMultiError is an error wrapping multiple validation errors returned
// by ModelUser.ValidateAll() if the designated constraints aren't met.
type ModelUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelUserMultiError) AllErrors() []error { return m }

// ModelUserValidationError is the validation error returned by
// ModelUser.Validate if the designated constraints aren't met.
type ModelUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelUserValidationError) ErrorName() string { return "ModelUserValidationError" }

// Error satisfies the builtin error interface
func (e ModelUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelUserValidationError{}

// Validate checks the field values on ModelChat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelChat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelChat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelChatMultiError, or nil
// if none found.
func (m *ModelChat) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelChat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Type

	// no validation rules for AccountSn

	// no validation rules for CustomerSn

	if len(errors) > 0 {
		return ModelChatMultiError(errors)
	}

	return nil
}

// ModelChatMultiError is an error wrapping multiple validation errors returned
// by ModelChat.ValidateAll() if the designated constraints aren't met.
type ModelChatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelChatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelChatMultiError) AllErrors() []error { return m }

// ModelChatValidationError is the validation error returned by
// ModelChat.Validate if the designated constraints aren't met.
type ModelChatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelChatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelChatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelChatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelChatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelChatValidationError) ErrorName() string { return "ModelChatValidationError" }

// Error satisfies the builtin error interface
func (e ModelChatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelChat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelChatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelChatValidationError{}

// Validate checks the field values on ModelMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelMessageMultiError, or
// nil if none found.
func (m *ModelMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for ServerMsgId

	// no validation rules for SysMsgId

	// no validation rules for SendAt

	// no validation rules for From

	// no validation rules for To

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelMessageValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for ChatId

	if len(errors) > 0 {
		return ModelMessageMultiError(errors)
	}

	return nil
}

// ModelMessageMultiError is an error wrapping multiple validation errors
// returned by ModelMessage.ValidateAll() if the designated constraints aren't met.
type ModelMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelMessageMultiError) AllErrors() []error { return m }

// ModelMessageValidationError is the validation error returned by
// ModelMessage.Validate if the designated constraints aren't met.
type ModelMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelMessageValidationError) ErrorName() string { return "ModelMessageValidationError" }

// Error satisfies the builtin error interface
func (e ModelMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelMessageValidationError{}

// Validate checks the field values on ModelFoodMenu with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFoodMenu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFoodMenu with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelFoodMenuMultiError, or
// nil if none found.
func (m *ModelFoodMenu) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFoodMenu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatorId

	// no validation rules for Name

	if len(errors) > 0 {
		return ModelFoodMenuMultiError(errors)
	}

	return nil
}

// ModelFoodMenuMultiError is an error wrapping multiple validation errors
// returned by ModelFoodMenu.ValidateAll() if the designated constraints
// aren't met.
type ModelFoodMenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFoodMenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFoodMenuMultiError) AllErrors() []error { return m }

// ModelFoodMenuValidationError is the validation error returned by
// ModelFoodMenu.Validate if the designated constraints aren't met.
type ModelFoodMenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFoodMenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFoodMenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFoodMenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFoodMenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFoodMenuValidationError) ErrorName() string { return "ModelFoodMenuValidationError" }

// Error satisfies the builtin error interface
func (e ModelFoodMenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFoodMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFoodMenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFoodMenuValidationError{}

// Validate checks the field values on ModelFoodMenuElem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelFoodMenuElem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFoodMenuElem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelFoodMenuElemMultiError, or nil if none found.
func (m *ModelFoodMenuElem) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFoodMenuElem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatorId

	// no validation rules for MenuId

	// no validation rules for Name

	// no validation rules for ImgUrl

	// no validation rules for Desc

	if len(errors) > 0 {
		return ModelFoodMenuElemMultiError(errors)
	}

	return nil
}

// ModelFoodMenuElemMultiError is an error wrapping multiple validation errors
// returned by ModelFoodMenuElem.ValidateAll() if the designated constraints
// aren't met.
type ModelFoodMenuElemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFoodMenuElemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFoodMenuElemMultiError) AllErrors() []error { return m }

// ModelFoodMenuElemValidationError is the validation error returned by
// ModelFoodMenuElem.Validate if the designated constraints aren't met.
type ModelFoodMenuElemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFoodMenuElemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFoodMenuElemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFoodMenuElemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFoodMenuElemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFoodMenuElemValidationError) ErrorName() string {
	return "ModelFoodMenuElemValidationError"
}

// Error satisfies the builtin error interface
func (e ModelFoodMenuElemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFoodMenuElem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFoodMenuElemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFoodMenuElemValidationError{}

// Validate checks the field values on DelFileListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelFileListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFileListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelFileListReqMultiError,
// or nil if none found.
func (m *DelFileListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFileListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := DelFileListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelFileListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelFileListReqMultiError(errors)
	}

	return nil
}

// DelFileListReqMultiError is an error wrapping multiple validation errors
// returned by DelFileListReq.ValidateAll() if the designated constraints
// aren't met.
type DelFileListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFileListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFileListReqMultiError) AllErrors() []error { return m }

// DelFileListReqValidationError is the validation error returned by
// DelFileListReq.Validate if the designated constraints aren't met.
type DelFileListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFileListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFileListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFileListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFileListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFileListReqValidationError) ErrorName() string { return "DelFileListReqValidationError" }

// Error satisfies the builtin error interface
func (e DelFileListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFileListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFileListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFileListReqValidationError{}

// Validate checks the field values on DelFileListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelFileListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFileListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelFileListRspMultiError,
// or nil if none found.
func (m *DelFileListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFileListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelFileListRspMultiError(errors)
	}

	return nil
}

// DelFileListRspMultiError is an error wrapping multiple validation errors
// returned by DelFileListRsp.ValidateAll() if the designated constraints
// aren't met.
type DelFileListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFileListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFileListRspMultiError) AllErrors() []error { return m }

// DelFileListRspValidationError is the validation error returned by
// DelFileListRsp.Validate if the designated constraints aren't met.
type DelFileListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFileListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFileListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFileListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFileListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFileListRspValidationError) ErrorName() string { return "DelFileListRspValidationError" }

// Error satisfies the builtin error interface
func (e DelFileListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFileListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFileListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFileListRspValidationError{}

// Validate checks the field values on GetFileReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileReqMultiError, or
// nil if none found.
func (m *GetFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetFileReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFileReqMultiError(errors)
	}

	return nil
}

// GetFileReqMultiError is an error wrapping multiple validation errors
// returned by GetFileReq.ValidateAll() if the designated constraints aren't met.
type GetFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileReqMultiError) AllErrors() []error { return m }

// GetFileReqValidationError is the validation error returned by
// GetFileReq.Validate if the designated constraints aren't met.
type GetFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileReqValidationError) ErrorName() string { return "GetFileReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileReqValidationError{}

// Validate checks the field values on GetFileRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRspMultiError, or
// nil if none found.
func (m *GetFileRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileRspMultiError(errors)
	}

	return nil
}

// GetFileRspMultiError is an error wrapping multiple validation errors
// returned by GetFileRsp.ValidateAll() if the designated constraints aren't met.
type GetFileRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRspMultiError) AllErrors() []error { return m }

// GetFileRspValidationError is the validation error returned by
// GetFileRsp.Validate if the designated constraints aren't met.
type GetFileRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRspValidationError) ErrorName() string { return "GetFileRspValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRspValidationError{}

// Validate checks the field values on GetFileListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileListReqMultiError,
// or nil if none found.
func (m *GetFileListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetFileListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileListReqMultiError(errors)
	}

	return nil
}

// GetFileListReqMultiError is an error wrapping multiple validation errors
// returned by GetFileListReq.ValidateAll() if the designated constraints
// aren't met.
type GetFileListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileListReqMultiError) AllErrors() []error { return m }

// GetFileListReqValidationError is the validation error returned by
// GetFileListReq.Validate if the designated constraints aren't met.
type GetFileListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileListReqValidationError) ErrorName() string { return "GetFileListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFileListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileListReqValidationError{}

// Validate checks the field values on GetFileListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileListRspMultiError,
// or nil if none found.
func (m *GetFileListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFileListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFileListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFileListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFileListRspMultiError(errors)
	}

	return nil
}

// GetFileListRspMultiError is an error wrapping multiple validation errors
// returned by GetFileListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetFileListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileListRspMultiError) AllErrors() []error { return m }

// GetFileListRspValidationError is the validation error returned by
// GetFileListRsp.Validate if the designated constraints aren't met.
type GetFileListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileListRspValidationError) ErrorName() string { return "GetFileListRspValidationError" }

// Error satisfies the builtin error interface
func (e GetFileListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileListRspValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 6 || l > 12 {
		err := LoginReqValidationError{
			field:  "Username",
			reason: "value length must be between 6 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 16 {
		err := LoginReqValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRspMultiError, or nil
// if none found.
func (m *LoginRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRspValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRspValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRspValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRspMultiError(errors)
	}

	return nil
}

// LoginRspMultiError is an error wrapping multiple validation errors returned
// by LoginRsp.ValidateAll() if the designated constraints aren't met.
type LoginRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRspMultiError) AllErrors() []error { return m }

// LoginRspValidationError is the validation error returned by
// LoginRsp.Validate if the designated constraints aren't met.
type LoginRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRspValidationError) ErrorName() string { return "LoginRspValidationError" }

// Error satisfies the builtin error interface
func (e LoginRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRspValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRspMultiError, or nil
// if none found.
func (m *LogoutRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRspMultiError(errors)
	}

	return nil
}

// LogoutRspMultiError is an error wrapping multiple validation errors returned
// by LogoutRsp.ValidateAll() if the designated constraints aren't met.
type LogoutRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRspMultiError) AllErrors() []error { return m }

// LogoutRspValidationError is the validation error returned by
// LogoutRsp.Validate if the designated constraints aren't met.
type LogoutRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRspValidationError) ErrorName() string { return "LogoutRspValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRspValidationError{}

// Validate checks the field values on GetLoginUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLoginUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoginUserReqMultiError, or nil if none found.
func (m *GetLoginUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLoginUserReqMultiError(errors)
	}

	return nil
}

// GetLoginUserReqMultiError is an error wrapping multiple validation errors
// returned by GetLoginUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetLoginUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginUserReqMultiError) AllErrors() []error { return m }

// GetLoginUserReqValidationError is the validation error returned by
// GetLoginUserReq.Validate if the designated constraints aren't met.
type GetLoginUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginUserReqValidationError) ErrorName() string { return "GetLoginUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetLoginUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginUserReqValidationError{}

// Validate checks the field values on GetLoginUserRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLoginUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginUserRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoginUserRspMultiError, or nil if none found.
func (m *GetLoginUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLoginUserRspValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLoginUserRspValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginUserRspValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLoginUserRspMultiError(errors)
	}

	return nil
}

// GetLoginUserRspMultiError is an error wrapping multiple validation errors
// returned by GetLoginUserRsp.ValidateAll() if the designated constraints
// aren't met.
type GetLoginUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginUserRspMultiError) AllErrors() []error { return m }

// GetLoginUserRspValidationError is the validation error returned by
// GetLoginUserRsp.Validate if the designated constraints aren't met.
type GetLoginUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginUserRspValidationError) ErrorName() string { return "GetLoginUserRspValidationError" }

// Error satisfies the builtin error interface
func (e GetLoginUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginUserRspValidationError{}

// Validate checks the field values on UpdateLoginUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLoginUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLoginUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLoginUserInfoReqMultiError, or nil if none found.
func (m *UpdateLoginUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLoginUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := UpdateLoginUserInfoReqValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLoginUserInfoReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLoginUserInfoReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLoginUserInfoReqValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLoginUserInfoReqMultiError(errors)
	}

	return nil
}

// UpdateLoginUserInfoReqMultiError is an error wrapping multiple validation
// errors returned by UpdateLoginUserInfoReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateLoginUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLoginUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLoginUserInfoReqMultiError) AllErrors() []error { return m }

// UpdateLoginUserInfoReqValidationError is the validation error returned by
// UpdateLoginUserInfoReq.Validate if the designated constraints aren't met.
type UpdateLoginUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLoginUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLoginUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLoginUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLoginUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLoginUserInfoReqValidationError) ErrorName() string {
	return "UpdateLoginUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLoginUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLoginUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLoginUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLoginUserInfoReqValidationError{}

// Validate checks the field values on UpdateLoginUserInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLoginUserInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLoginUserInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLoginUserInfoRspMultiError, or nil if none found.
func (m *UpdateLoginUserInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLoginUserInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateLoginUserInfoRspMultiError(errors)
	}

	return nil
}

// UpdateLoginUserInfoRspMultiError is an error wrapping multiple validation
// errors returned by UpdateLoginUserInfoRsp.ValidateAll() if the designated
// constraints aren't met.
type UpdateLoginUserInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLoginUserInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLoginUserInfoRspMultiError) AllErrors() []error { return m }

// UpdateLoginUserInfoRspValidationError is the validation error returned by
// UpdateLoginUserInfoRsp.Validate if the designated constraints aren't met.
type UpdateLoginUserInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLoginUserInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLoginUserInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLoginUserInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLoginUserInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLoginUserInfoRspValidationError) ErrorName() string {
	return "UpdateLoginUserInfoRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLoginUserInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLoginUserInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLoginUserInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLoginUserInfoRspValidationError{}

// Validate checks the field values on ResetPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordReqMultiError, or nil if none found.
func (m *ResetPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOldPassword()); l < 6 || l > 16 {
		err := ResetPasswordReqValidationError{
			field:  "OldPassword",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 6 || l > 16 {
		err := ResetPasswordReqValidationError{
			field:  "NewPassword",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPasswordReqMultiError(errors)
	}

	return nil
}

// ResetPasswordReqMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordReqMultiError) AllErrors() []error { return m }

// ResetPasswordReqValidationError is the validation error returned by
// ResetPasswordReq.Validate if the designated constraints aren't met.
type ResetPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReqValidationError) ErrorName() string { return "ResetPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReqValidationError{}

// Validate checks the field values on ResetPasswordRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRspMultiError, or nil if none found.
func (m *ResetPasswordRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordRspMultiError(errors)
	}

	return nil
}

// ResetPasswordRspMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordRsp.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRspMultiError) AllErrors() []error { return m }

// ResetPasswordRspValidationError is the validation error returned by
// ResetPasswordRsp.Validate if the designated constraints aren't met.
type ResetPasswordRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRspValidationError) ErrorName() string { return "ResetPasswordRspValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRspValidationError{}

// Validate checks the field values on GetFrontUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFrontUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFrontUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFrontUserReqMultiError, or nil if none found.
func (m *GetFrontUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFrontUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFrontUserReqMultiError(errors)
	}

	return nil
}

// GetFrontUserReqMultiError is an error wrapping multiple validation errors
// returned by GetFrontUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetFrontUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFrontUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFrontUserReqMultiError) AllErrors() []error { return m }

// GetFrontUserReqValidationError is the validation error returned by
// GetFrontUserReq.Validate if the designated constraints aren't met.
type GetFrontUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFrontUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFrontUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFrontUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFrontUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFrontUserReqValidationError) ErrorName() string { return "GetFrontUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFrontUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFrontUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFrontUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFrontUserReqValidationError{}

// Validate checks the field values on SyncFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SyncFileReqMultiError, or
// nil if none found.
func (m *SyncFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SyncFileReqMultiError(errors)
	}

	return nil
}

// SyncFileReqMultiError is an error wrapping multiple validation errors
// returned by SyncFileReq.ValidateAll() if the designated constraints aren't met.
type SyncFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncFileReqMultiError) AllErrors() []error { return m }

// SyncFileReqValidationError is the validation error returned by
// SyncFileReq.Validate if the designated constraints aren't met.
type SyncFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncFileReqValidationError) ErrorName() string { return "SyncFileReqValidationError" }

// Error satisfies the builtin error interface
func (e SyncFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncFileReqValidationError{}

// Validate checks the field values on SyncFileRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncFileRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncFileRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SyncFileRspMultiError, or
// nil if none found.
func (m *SyncFileRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncFileRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SyncFileRspMultiError(errors)
	}

	return nil
}

// SyncFileRspMultiError is an error wrapping multiple validation errors
// returned by SyncFileRsp.ValidateAll() if the designated constraints aren't met.
type SyncFileRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncFileRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncFileRspMultiError) AllErrors() []error { return m }

// SyncFileRspValidationError is the validation error returned by
// SyncFileRsp.Validate if the designated constraints aren't met.
type SyncFileRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncFileRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncFileRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncFileRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncFileRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncFileRspValidationError) ErrorName() string { return "SyncFileRspValidationError" }

// Error satisfies the builtin error interface
func (e SyncFileRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncFileRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncFileRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncFileRspValidationError{}

// Validate checks the field values on AddUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddUserReqMultiError, or
// nil if none found.
func (m *AddUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := AddUserReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUserReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddUserReqMultiError(errors)
	}

	return nil
}

// AddUserReqMultiError is an error wrapping multiple validation errors
// returned by AddUserReq.ValidateAll() if the designated constraints aren't met.
type AddUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserReqMultiError) AllErrors() []error { return m }

// AddUserReqValidationError is the validation error returned by
// AddUserReq.Validate if the designated constraints aren't met.
type AddUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserReqValidationError) ErrorName() string { return "AddUserReqValidationError" }

// Error satisfies the builtin error interface
func (e AddUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserReqValidationError{}

// Validate checks the field values on AddUserRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddUserRspMultiError, or
// nil if none found.
func (m *AddUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUserRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddUserRspMultiError(errors)
	}

	return nil
}

// AddUserRspMultiError is an error wrapping multiple validation errors
// returned by AddUserRsp.ValidateAll() if the designated constraints aren't met.
type AddUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserRspMultiError) AllErrors() []error { return m }

// AddUserRspValidationError is the validation error returned by
// AddUserRsp.Validate if the designated constraints aren't met.
type AddUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRspValidationError) ErrorName() string { return "AddUserRspValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRspValidationError{}

// Validate checks the field values on UpdateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserReqMultiError, or
// nil if none found.
func (m *UpdateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateUserReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserReqMultiError(errors)
	}

	return nil
}

// UpdateUserReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReqMultiError) AllErrors() []error { return m }

// UpdateUserReqValidationError is the validation error returned by
// UpdateUserReq.Validate if the designated constraints aren't met.
type UpdateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReqValidationError) ErrorName() string { return "UpdateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReqValidationError{}

// Validate checks the field values on UpdateUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserRspMultiError, or
// nil if none found.
func (m *UpdateUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserRspMultiError(errors)
	}

	return nil
}

// UpdateUserRspMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRspMultiError) AllErrors() []error { return m }

// UpdateUserRspValidationError is the validation error returned by
// UpdateUserRsp.Validate if the designated constraints aren't met.
type UpdateUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRspValidationError) ErrorName() string { return "UpdateUserRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRspValidationError{}

// Validate checks the field values on DelUserListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelUserListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUserListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelUserListReqMultiError,
// or nil if none found.
func (m *DelUserListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUserListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := DelUserListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelUserListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelUserListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelUserListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelUserListReqMultiError(errors)
	}

	return nil
}

// DelUserListReqMultiError is an error wrapping multiple validation errors
// returned by DelUserListReq.ValidateAll() if the designated constraints
// aren't met.
type DelUserListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUserListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUserListReqMultiError) AllErrors() []error { return m }

// DelUserListReqValidationError is the validation error returned by
// DelUserListReq.Validate if the designated constraints aren't met.
type DelUserListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserListReqValidationError) ErrorName() string { return "DelUserListReqValidationError" }

// Error satisfies the builtin error interface
func (e DelUserListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserListReqValidationError{}

// Validate checks the field values on DelUserListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelUserListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUserListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelUserListRspMultiError,
// or nil if none found.
func (m *DelUserListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUserListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelUserListRspMultiError(errors)
	}

	return nil
}

// DelUserListRspMultiError is an error wrapping multiple validation errors
// returned by DelUserListRsp.ValidateAll() if the designated constraints
// aren't met.
type DelUserListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUserListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUserListRspMultiError) AllErrors() []error { return m }

// DelUserListRspValidationError is the validation error returned by
// DelUserListRsp.Validate if the designated constraints aren't met.
type DelUserListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserListRspValidationError) ErrorName() string { return "DelUserListRspValidationError" }

// Error satisfies the builtin error interface
func (e DelUserListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserListRspValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReqMultiError, or
// nil if none found.
func (m *GetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetUserReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserReqMultiError(errors)
	}

	return nil
}

// GetUserReqMultiError is an error wrapping multiple validation errors
// returned by GetUserReq.ValidateAll() if the designated constraints aren't met.
type GetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqMultiError) AllErrors() []error { return m }

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRspMultiError, or
// nil if none found.
func (m *GetUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserRspMultiError(errors)
	}

	return nil
}

// GetUserRspMultiError is an error wrapping multiple validation errors
// returned by GetUserRsp.ValidateAll() if the designated constraints aren't met.
type GetUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRspMultiError) AllErrors() []error { return m }

// GetUserRspValidationError is the validation error returned by
// GetUserRsp.Validate if the designated constraints aren't met.
type GetUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRspValidationError) ErrorName() string { return "GetUserRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRspValidationError{}

// Validate checks the field values on GetUserListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserListReqMultiError,
// or nil if none found.
func (m *GetUserListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetUserListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserListReqMultiError(errors)
	}

	return nil
}

// GetUserListReqMultiError is an error wrapping multiple validation errors
// returned by GetUserListReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListReqMultiError) AllErrors() []error { return m }

// GetUserListReqValidationError is the validation error returned by
// GetUserListReq.Validate if the designated constraints aren't met.
type GetUserListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListReqValidationError) ErrorName() string { return "GetUserListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListReqValidationError{}

// Validate checks the field values on GetUserListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserListRspMultiError,
// or nil if none found.
func (m *GetUserListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserListRspMultiError(errors)
	}

	return nil
}

// GetUserListRspMultiError is an error wrapping multiple validation errors
// returned by GetUserListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListRspMultiError) AllErrors() []error { return m }

// GetUserListRspValidationError is the validation error returned by
// GetUserListRsp.Validate if the designated constraints aren't met.
type GetUserListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListRspValidationError) ErrorName() string { return "GetUserListRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListRspValidationError{}

// Validate checks the field values on AddFoodMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFoodMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFoodMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFoodMenuReqMultiError,
// or nil if none found.
func (m *AddFoodMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFoodMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := AddFoodMenuReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFoodMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFoodMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFoodMenuReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFoodMenuReqMultiError(errors)
	}

	return nil
}

// AddFoodMenuReqMultiError is an error wrapping multiple validation errors
// returned by AddFoodMenuReq.ValidateAll() if the designated constraints
// aren't met.
type AddFoodMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFoodMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFoodMenuReqMultiError) AllErrors() []error { return m }

// AddFoodMenuReqValidationError is the validation error returned by
// AddFoodMenuReq.Validate if the designated constraints aren't met.
type AddFoodMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFoodMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFoodMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFoodMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFoodMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFoodMenuReqValidationError) ErrorName() string { return "AddFoodMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e AddFoodMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFoodMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFoodMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFoodMenuReqValidationError{}

// Validate checks the field values on AddFoodMenuRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFoodMenuRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFoodMenuRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFoodMenuRspMultiError,
// or nil if none found.
func (m *AddFoodMenuRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFoodMenuRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFoodMenuRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFoodMenuRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFoodMenuRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFoodMenuRspMultiError(errors)
	}

	return nil
}

// AddFoodMenuRspMultiError is an error wrapping multiple validation errors
// returned by AddFoodMenuRsp.ValidateAll() if the designated constraints
// aren't met.
type AddFoodMenuRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFoodMenuRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFoodMenuRspMultiError) AllErrors() []error { return m }

// AddFoodMenuRspValidationError is the validation error returned by
// AddFoodMenuRsp.Validate if the designated constraints aren't met.
type AddFoodMenuRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFoodMenuRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFoodMenuRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFoodMenuRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFoodMenuRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFoodMenuRspValidationError) ErrorName() string { return "AddFoodMenuRspValidationError" }

// Error satisfies the builtin error interface
func (e AddFoodMenuRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFoodMenuRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFoodMenuRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFoodMenuRspValidationError{}

// Validate checks the field values on UpdateFoodMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFoodMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFoodMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFoodMenuReqMultiError, or nil if none found.
func (m *UpdateFoodMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFoodMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateFoodMenuReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFoodMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFoodMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFoodMenuReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFoodMenuReqMultiError(errors)
	}

	return nil
}

// UpdateFoodMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateFoodMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateFoodMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFoodMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFoodMenuReqMultiError) AllErrors() []error { return m }

// UpdateFoodMenuReqValidationError is the validation error returned by
// UpdateFoodMenuReq.Validate if the designated constraints aren't met.
type UpdateFoodMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFoodMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFoodMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFoodMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFoodMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFoodMenuReqValidationError) ErrorName() string {
	return "UpdateFoodMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFoodMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFoodMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFoodMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFoodMenuReqValidationError{}

// Validate checks the field values on UpdateFoodMenuRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFoodMenuRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFoodMenuRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFoodMenuRspMultiError, or nil if none found.
func (m *UpdateFoodMenuRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFoodMenuRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFoodMenuRspMultiError(errors)
	}

	return nil
}

// UpdateFoodMenuRspMultiError is an error wrapping multiple validation errors
// returned by UpdateFoodMenuRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateFoodMenuRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFoodMenuRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFoodMenuRspMultiError) AllErrors() []error { return m }

// UpdateFoodMenuRspValidationError is the validation error returned by
// UpdateFoodMenuRsp.Validate if the designated constraints aren't met.
type UpdateFoodMenuRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFoodMenuRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFoodMenuRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFoodMenuRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFoodMenuRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFoodMenuRspValidationError) ErrorName() string {
	return "UpdateFoodMenuRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFoodMenuRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFoodMenuRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFoodMenuRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFoodMenuRspValidationError{}

// Validate checks the field values on DelFoodMenuListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelFoodMenuListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFoodMenuListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelFoodMenuListReqMultiError, or nil if none found.
func (m *DelFoodMenuListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFoodMenuListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := DelFoodMenuListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelFoodMenuListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelFoodMenuListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelFoodMenuListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelFoodMenuListReqMultiError(errors)
	}

	return nil
}

// DelFoodMenuListReqMultiError is an error wrapping multiple validation errors
// returned by DelFoodMenuListReq.ValidateAll() if the designated constraints
// aren't met.
type DelFoodMenuListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFoodMenuListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFoodMenuListReqMultiError) AllErrors() []error { return m }

// DelFoodMenuListReqValidationError is the validation error returned by
// DelFoodMenuListReq.Validate if the designated constraints aren't met.
type DelFoodMenuListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFoodMenuListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFoodMenuListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFoodMenuListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFoodMenuListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFoodMenuListReqValidationError) ErrorName() string {
	return "DelFoodMenuListReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelFoodMenuListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFoodMenuListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFoodMenuListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFoodMenuListReqValidationError{}

// Validate checks the field values on DelFoodMenuListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelFoodMenuListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFoodMenuListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelFoodMenuListRspMultiError, or nil if none found.
func (m *DelFoodMenuListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFoodMenuListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelFoodMenuListRspMultiError(errors)
	}

	return nil
}

// DelFoodMenuListRspMultiError is an error wrapping multiple validation errors
// returned by DelFoodMenuListRsp.ValidateAll() if the designated constraints
// aren't met.
type DelFoodMenuListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFoodMenuListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFoodMenuListRspMultiError) AllErrors() []error { return m }

// DelFoodMenuListRspValidationError is the validation error returned by
// DelFoodMenuListRsp.Validate if the designated constraints aren't met.
type DelFoodMenuListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFoodMenuListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFoodMenuListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFoodMenuListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFoodMenuListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFoodMenuListRspValidationError) ErrorName() string {
	return "DelFoodMenuListRspValidationError"
}

// Error satisfies the builtin error interface
func (e DelFoodMenuListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFoodMenuListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFoodMenuListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFoodMenuListRspValidationError{}

// Validate checks the field values on GetFoodMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFoodMenuReqMultiError,
// or nil if none found.
func (m *GetFoodMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetFoodMenuReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFoodMenuReqMultiError(errors)
	}

	return nil
}

// GetFoodMenuReqMultiError is an error wrapping multiple validation errors
// returned by GetFoodMenuReq.ValidateAll() if the designated constraints
// aren't met.
type GetFoodMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuReqMultiError) AllErrors() []error { return m }

// GetFoodMenuReqValidationError is the validation error returned by
// GetFoodMenuReq.Validate if the designated constraints aren't met.
type GetFoodMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuReqValidationError) ErrorName() string { return "GetFoodMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFoodMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuReqValidationError{}

// Validate checks the field values on GetFoodMenuRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFoodMenuRspMultiError,
// or nil if none found.
func (m *GetFoodMenuRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFoodMenuRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFoodMenuRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFoodMenuRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFoodMenuRspMultiError(errors)
	}

	return nil
}

// GetFoodMenuRspMultiError is an error wrapping multiple validation errors
// returned by GetFoodMenuRsp.ValidateAll() if the designated constraints
// aren't met.
type GetFoodMenuRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuRspMultiError) AllErrors() []error { return m }

// GetFoodMenuRspValidationError is the validation error returned by
// GetFoodMenuRsp.Validate if the designated constraints aren't met.
type GetFoodMenuRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuRspValidationError) ErrorName() string { return "GetFoodMenuRspValidationError" }

// Error satisfies the builtin error interface
func (e GetFoodMenuRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuRspValidationError{}

// Validate checks the field values on GetFoodMenuListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodMenuListReqMultiError, or nil if none found.
func (m *GetFoodMenuListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetFoodMenuListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFoodMenuListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFoodMenuListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFoodMenuListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFoodMenuListReqMultiError(errors)
	}

	return nil
}

// GetFoodMenuListReqMultiError is an error wrapping multiple validation errors
// returned by GetFoodMenuListReq.ValidateAll() if the designated constraints
// aren't met.
type GetFoodMenuListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuListReqMultiError) AllErrors() []error { return m }

// GetFoodMenuListReqValidationError is the validation error returned by
// GetFoodMenuListReq.Validate if the designated constraints aren't met.
type GetFoodMenuListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuListReqValidationError) ErrorName() string {
	return "GetFoodMenuListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodMenuListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuListReqValidationError{}

// Validate checks the field values on GetFoodMenuListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodMenuListRspMultiError, or nil if none found.
func (m *GetFoodMenuListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFoodMenuListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFoodMenuListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFoodMenuListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFoodMenuListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFoodMenuListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFoodMenuListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFoodMenuListRspMultiError(errors)
	}

	return nil
}

// GetFoodMenuListRspMultiError is an error wrapping multiple validation errors
// returned by GetFoodMenuListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetFoodMenuListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuListRspMultiError) AllErrors() []error { return m }

// GetFoodMenuListRspValidationError is the validation error returned by
// GetFoodMenuListRsp.Validate if the designated constraints aren't met.
type GetFoodMenuListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuListRspValidationError) ErrorName() string {
	return "GetFoodMenuListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodMenuListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuListRspValidationError{}

// Validate checks the field values on AddFoodMenuElemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddFoodMenuElemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFoodMenuElemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFoodMenuElemReqMultiError, or nil if none found.
func (m *AddFoodMenuElemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFoodMenuElemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := AddFoodMenuElemReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFoodMenuElemReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFoodMenuElemReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFoodMenuElemReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFoodMenuElemReqMultiError(errors)
	}

	return nil
}

// AddFoodMenuElemReqMultiError is an error wrapping multiple validation errors
// returned by AddFoodMenuElemReq.ValidateAll() if the designated constraints
// aren't met.
type AddFoodMenuElemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFoodMenuElemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFoodMenuElemReqMultiError) AllErrors() []error { return m }

// AddFoodMenuElemReqValidationError is the validation error returned by
// AddFoodMenuElemReq.Validate if the designated constraints aren't met.
type AddFoodMenuElemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFoodMenuElemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFoodMenuElemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFoodMenuElemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFoodMenuElemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFoodMenuElemReqValidationError) ErrorName() string {
	return "AddFoodMenuElemReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddFoodMenuElemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFoodMenuElemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFoodMenuElemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFoodMenuElemReqValidationError{}

// Validate checks the field values on AddFoodMenuElemRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddFoodMenuElemRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFoodMenuElemRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFoodMenuElemRspMultiError, or nil if none found.
func (m *AddFoodMenuElemRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFoodMenuElemRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFoodMenuElemRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFoodMenuElemRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFoodMenuElemRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFoodMenuElemRspMultiError(errors)
	}

	return nil
}

// AddFoodMenuElemRspMultiError is an error wrapping multiple validation errors
// returned by AddFoodMenuElemRsp.ValidateAll() if the designated constraints
// aren't met.
type AddFoodMenuElemRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFoodMenuElemRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFoodMenuElemRspMultiError) AllErrors() []error { return m }

// AddFoodMenuElemRspValidationError is the validation error returned by
// AddFoodMenuElemRsp.Validate if the designated constraints aren't met.
type AddFoodMenuElemRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFoodMenuElemRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFoodMenuElemRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFoodMenuElemRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFoodMenuElemRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFoodMenuElemRspValidationError) ErrorName() string {
	return "AddFoodMenuElemRspValidationError"
}

// Error satisfies the builtin error interface
func (e AddFoodMenuElemRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFoodMenuElemRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFoodMenuElemRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFoodMenuElemRspValidationError{}

// Validate checks the field values on UpdateFoodMenuElemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFoodMenuElemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFoodMenuElemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFoodMenuElemReqMultiError, or nil if none found.
func (m *UpdateFoodMenuElemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFoodMenuElemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateFoodMenuElemReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFoodMenuElemReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFoodMenuElemReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFoodMenuElemReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFoodMenuElemReqMultiError(errors)
	}

	return nil
}

// UpdateFoodMenuElemReqMultiError is an error wrapping multiple validation
// errors returned by UpdateFoodMenuElemReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateFoodMenuElemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFoodMenuElemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFoodMenuElemReqMultiError) AllErrors() []error { return m }

// UpdateFoodMenuElemReqValidationError is the validation error returned by
// UpdateFoodMenuElemReq.Validate if the designated constraints aren't met.
type UpdateFoodMenuElemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFoodMenuElemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFoodMenuElemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFoodMenuElemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFoodMenuElemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFoodMenuElemReqValidationError) ErrorName() string {
	return "UpdateFoodMenuElemReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFoodMenuElemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFoodMenuElemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFoodMenuElemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFoodMenuElemReqValidationError{}

// Validate checks the field values on UpdateFoodMenuElemRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFoodMenuElemRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFoodMenuElemRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFoodMenuElemRspMultiError, or nil if none found.
func (m *UpdateFoodMenuElemRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFoodMenuElemRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFoodMenuElemRspMultiError(errors)
	}

	return nil
}

// UpdateFoodMenuElemRspMultiError is an error wrapping multiple validation
// errors returned by UpdateFoodMenuElemRsp.ValidateAll() if the designated
// constraints aren't met.
type UpdateFoodMenuElemRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFoodMenuElemRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFoodMenuElemRspMultiError) AllErrors() []error { return m }

// UpdateFoodMenuElemRspValidationError is the validation error returned by
// UpdateFoodMenuElemRsp.Validate if the designated constraints aren't met.
type UpdateFoodMenuElemRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFoodMenuElemRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFoodMenuElemRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFoodMenuElemRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFoodMenuElemRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFoodMenuElemRspValidationError) ErrorName() string {
	return "UpdateFoodMenuElemRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFoodMenuElemRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFoodMenuElemRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFoodMenuElemRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFoodMenuElemRspValidationError{}

// Validate checks the field values on DelFoodMenuElemListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelFoodMenuElemListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFoodMenuElemListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelFoodMenuElemListReqMultiError, or nil if none found.
func (m *DelFoodMenuElemListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFoodMenuElemListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := DelFoodMenuElemListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelFoodMenuElemListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelFoodMenuElemListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelFoodMenuElemListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelFoodMenuElemListReqMultiError(errors)
	}

	return nil
}

// DelFoodMenuElemListReqMultiError is an error wrapping multiple validation
// errors returned by DelFoodMenuElemListReq.ValidateAll() if the designated
// constraints aren't met.
type DelFoodMenuElemListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFoodMenuElemListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFoodMenuElemListReqMultiError) AllErrors() []error { return m }

// DelFoodMenuElemListReqValidationError is the validation error returned by
// DelFoodMenuElemListReq.Validate if the designated constraints aren't met.
type DelFoodMenuElemListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFoodMenuElemListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFoodMenuElemListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFoodMenuElemListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFoodMenuElemListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFoodMenuElemListReqValidationError) ErrorName() string {
	return "DelFoodMenuElemListReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelFoodMenuElemListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFoodMenuElemListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFoodMenuElemListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFoodMenuElemListReqValidationError{}

// Validate checks the field values on DelFoodMenuElemListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelFoodMenuElemListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFoodMenuElemListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelFoodMenuElemListRspMultiError, or nil if none found.
func (m *DelFoodMenuElemListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFoodMenuElemListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelFoodMenuElemListRspMultiError(errors)
	}

	return nil
}

// DelFoodMenuElemListRspMultiError is an error wrapping multiple validation
// errors returned by DelFoodMenuElemListRsp.ValidateAll() if the designated
// constraints aren't met.
type DelFoodMenuElemListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFoodMenuElemListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFoodMenuElemListRspMultiError) AllErrors() []error { return m }

// DelFoodMenuElemListRspValidationError is the validation error returned by
// DelFoodMenuElemListRsp.Validate if the designated constraints aren't met.
type DelFoodMenuElemListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFoodMenuElemListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFoodMenuElemListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFoodMenuElemListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFoodMenuElemListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFoodMenuElemListRspValidationError) ErrorName() string {
	return "DelFoodMenuElemListRspValidationError"
}

// Error satisfies the builtin error interface
func (e DelFoodMenuElemListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFoodMenuElemListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFoodMenuElemListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFoodMenuElemListRspValidationError{}

// Validate checks the field values on GetFoodMenuElemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuElemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuElemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodMenuElemReqMultiError, or nil if none found.
func (m *GetFoodMenuElemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuElemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetFoodMenuElemReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFoodMenuElemReqMultiError(errors)
	}

	return nil
}

// GetFoodMenuElemReqMultiError is an error wrapping multiple validation errors
// returned by GetFoodMenuElemReq.ValidateAll() if the designated constraints
// aren't met.
type GetFoodMenuElemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuElemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuElemReqMultiError) AllErrors() []error { return m }

// GetFoodMenuElemReqValidationError is the validation error returned by
// GetFoodMenuElemReq.Validate if the designated constraints aren't met.
type GetFoodMenuElemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuElemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuElemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuElemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuElemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuElemReqValidationError) ErrorName() string {
	return "GetFoodMenuElemReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodMenuElemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuElemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuElemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuElemReqValidationError{}

// Validate checks the field values on GetFoodMenuElemRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuElemRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuElemRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodMenuElemRspMultiError, or nil if none found.
func (m *GetFoodMenuElemRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuElemRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFoodMenuElemRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFoodMenuElemRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFoodMenuElemRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFoodMenuElemRspMultiError(errors)
	}

	return nil
}

// GetFoodMenuElemRspMultiError is an error wrapping multiple validation errors
// returned by GetFoodMenuElemRsp.ValidateAll() if the designated constraints
// aren't met.
type GetFoodMenuElemRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuElemRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuElemRspMultiError) AllErrors() []error { return m }

// GetFoodMenuElemRspValidationError is the validation error returned by
// GetFoodMenuElemRsp.Validate if the designated constraints aren't met.
type GetFoodMenuElemRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuElemRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuElemRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuElemRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuElemRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuElemRspValidationError) ErrorName() string {
	return "GetFoodMenuElemRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodMenuElemRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuElemRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuElemRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuElemRspValidationError{}

// Validate checks the field values on GetFoodMenuElemListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuElemListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuElemListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodMenuElemListReqMultiError, or nil if none found.
func (m *GetFoodMenuElemListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuElemListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetFoodMenuElemListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFoodMenuElemListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFoodMenuElemListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFoodMenuElemListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFoodMenuElemListReqMultiError(errors)
	}

	return nil
}

// GetFoodMenuElemListReqMultiError is an error wrapping multiple validation
// errors returned by GetFoodMenuElemListReq.ValidateAll() if the designated
// constraints aren't met.
type GetFoodMenuElemListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuElemListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuElemListReqMultiError) AllErrors() []error { return m }

// GetFoodMenuElemListReqValidationError is the validation error returned by
// GetFoodMenuElemListReq.Validate if the designated constraints aren't met.
type GetFoodMenuElemListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuElemListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuElemListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuElemListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuElemListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuElemListReqValidationError) ErrorName() string {
	return "GetFoodMenuElemListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodMenuElemListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuElemListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuElemListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuElemListReqValidationError{}

// Validate checks the field values on GetFoodMenuElemListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodMenuElemListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodMenuElemListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodMenuElemListRspMultiError, or nil if none found.
func (m *GetFoodMenuElemListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodMenuElemListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFoodMenuElemListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFoodMenuElemListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFoodMenuElemListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFoodMenuElemListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFoodMenuElemListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFoodMenuElemListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFoodMenuElemListRspMultiError(errors)
	}

	return nil
}

// GetFoodMenuElemListRspMultiError is an error wrapping multiple validation
// errors returned by GetFoodMenuElemListRsp.ValidateAll() if the designated
// constraints aren't met.
type GetFoodMenuElemListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodMenuElemListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodMenuElemListRspMultiError) AllErrors() []error { return m }

// GetFoodMenuElemListRspValidationError is the validation error returned by
// GetFoodMenuElemListRsp.Validate if the designated constraints aren't met.
type GetFoodMenuElemListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodMenuElemListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodMenuElemListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodMenuElemListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodMenuElemListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodMenuElemListRspValidationError) ErrorName() string {
	return "GetFoodMenuElemListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodMenuElemListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodMenuElemListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodMenuElemListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodMenuElemListRspValidationError{}

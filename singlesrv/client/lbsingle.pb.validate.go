// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lbsingle.proto

package client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelFileMultiError, or nil
// if none found.
func (m *ModelFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return ModelFileMultiError(errors)
	}

	return nil
}

// ModelFileMultiError is an error wrapping multiple validation errors returned
// by ModelFile.ValidateAll() if the designated constraints aren't met.
type ModelFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelFileMultiError) AllErrors() []error { return m }

// ModelFileValidationError is the validation error returned by
// ModelFile.Validate if the designated constraints aren't met.
type ModelFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelFileValidationError) ErrorName() string { return "ModelFileValidationError" }

// Error satisfies the builtin error interface
func (e ModelFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelFileValidationError{}

// Validate checks the field values on AddFileReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFileReqMultiError, or
// nil if none found.
func (m *AddFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := AddFileReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFileReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFileReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFileReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFileReqMultiError(errors)
	}

	return nil
}

// AddFileReqMultiError is an error wrapping multiple validation errors
// returned by AddFileReq.ValidateAll() if the designated constraints aren't met.
type AddFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFileReqMultiError) AllErrors() []error { return m }

// AddFileReqValidationError is the validation error returned by
// AddFileReq.Validate if the designated constraints aren't met.
type AddFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFileReqValidationError) ErrorName() string { return "AddFileReqValidationError" }

// Error satisfies the builtin error interface
func (e AddFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFileReqValidationError{}

// Validate checks the field values on AddFileRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFileRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFileRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFileRspMultiError, or
// nil if none found.
func (m *AddFileRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFileRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFileRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFileRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFileRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFileRspMultiError(errors)
	}

	return nil
}

// AddFileRspMultiError is an error wrapping multiple validation errors
// returned by AddFileRsp.ValidateAll() if the designated constraints aren't met.
type AddFileRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFileRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFileRspMultiError) AllErrors() []error { return m }

// AddFileRspValidationError is the validation error returned by
// AddFileRsp.Validate if the designated constraints aren't met.
type AddFileRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFileRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFileRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFileRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFileRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFileRspValidationError) ErrorName() string { return "AddFileRspValidationError" }

// Error satisfies the builtin error interface
func (e AddFileRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFileRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFileRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFileRspValidationError{}

// Validate checks the field values on UpdateFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateFileReqMultiError, or
// nil if none found.
func (m *UpdateFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateFileReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFileReqMultiError(errors)
	}

	return nil
}

// UpdateFileReqMultiError is an error wrapping multiple validation errors
// returned by UpdateFileReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileReqMultiError) AllErrors() []error { return m }

// UpdateFileReqValidationError is the validation error returned by
// UpdateFileReq.Validate if the designated constraints aren't met.
type UpdateFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileReqValidationError) ErrorName() string { return "UpdateFileReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileReqValidationError{}

// Validate checks the field values on UpdateFileRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateFileRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateFileRspMultiError, or
// nil if none found.
func (m *UpdateFileRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFileRspMultiError(errors)
	}

	return nil
}

// UpdateFileRspMultiError is an error wrapping multiple validation errors
// returned by UpdateFileRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileRspMultiError) AllErrors() []error { return m }

// UpdateFileRspValidationError is the validation error returned by
// UpdateFileRsp.Validate if the designated constraints aren't met.
type UpdateFileRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileRspValidationError) ErrorName() string { return "UpdateFileRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateFileRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileRspValidationError{}

// Validate checks the field values on DelFileListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelFileListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFileListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelFileListReqMultiError,
// or nil if none found.
func (m *DelFileListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFileListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := DelFileListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelFileListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelFileListReqMultiError(errors)
	}

	return nil
}

// DelFileListReqMultiError is an error wrapping multiple validation errors
// returned by DelFileListReq.ValidateAll() if the designated constraints
// aren't met.
type DelFileListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFileListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFileListReqMultiError) AllErrors() []error { return m }

// DelFileListReqValidationError is the validation error returned by
// DelFileListReq.Validate if the designated constraints aren't met.
type DelFileListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFileListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFileListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFileListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFileListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFileListReqValidationError) ErrorName() string { return "DelFileListReqValidationError" }

// Error satisfies the builtin error interface
func (e DelFileListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFileListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFileListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFileListReqValidationError{}

// Validate checks the field values on DelFileListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelFileListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFileListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelFileListRspMultiError,
// or nil if none found.
func (m *DelFileListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFileListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelFileListRspMultiError(errors)
	}

	return nil
}

// DelFileListRspMultiError is an error wrapping multiple validation errors
// returned by DelFileListRsp.ValidateAll() if the designated constraints
// aren't met.
type DelFileListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFileListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFileListRspMultiError) AllErrors() []error { return m }

// DelFileListRspValidationError is the validation error returned by
// DelFileListRsp.Validate if the designated constraints aren't met.
type DelFileListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFileListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFileListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFileListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFileListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFileListRspValidationError) ErrorName() string { return "DelFileListRspValidationError" }

// Error satisfies the builtin error interface
func (e DelFileListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFileListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFileListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFileListRspValidationError{}

// Validate checks the field values on GetFileReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileReqMultiError, or
// nil if none found.
func (m *GetFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetFileReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFileReqMultiError(errors)
	}

	return nil
}

// GetFileReqMultiError is an error wrapping multiple validation errors
// returned by GetFileReq.ValidateAll() if the designated constraints aren't met.
type GetFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileReqMultiError) AllErrors() []error { return m }

// GetFileReqValidationError is the validation error returned by
// GetFileReq.Validate if the designated constraints aren't met.
type GetFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileReqValidationError) ErrorName() string { return "GetFileReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileReqValidationError{}

// Validate checks the field values on GetFileRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRspMultiError, or
// nil if none found.
func (m *GetFileRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileRspMultiError(errors)
	}

	return nil
}

// GetFileRspMultiError is an error wrapping multiple validation errors
// returned by GetFileRsp.ValidateAll() if the designated constraints aren't met.
type GetFileRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRspMultiError) AllErrors() []error { return m }

// GetFileRspValidationError is the validation error returned by
// GetFileRsp.Validate if the designated constraints aren't met.
type GetFileRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRspValidationError) ErrorName() string { return "GetFileRspValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRspValidationError{}

// Validate checks the field values on GetFileListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileListReqMultiError,
// or nil if none found.
func (m *GetFileListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetFileListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileListReqMultiError(errors)
	}

	return nil
}

// GetFileListReqMultiError is an error wrapping multiple validation errors
// returned by GetFileListReq.ValidateAll() if the designated constraints
// aren't met.
type GetFileListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileListReqMultiError) AllErrors() []error { return m }

// GetFileListReqValidationError is the validation error returned by
// GetFileListReq.Validate if the designated constraints aren't met.
type GetFileListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileListReqValidationError) ErrorName() string { return "GetFileListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFileListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileListReqValidationError{}

// Validate checks the field values on GetFileListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileListRspMultiError,
// or nil if none found.
func (m *GetFileListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileListRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileListRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFileListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFileListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFileListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFileListRspMultiError(errors)
	}

	return nil
}

// GetFileListRspMultiError is an error wrapping multiple validation errors
// returned by GetFileListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetFileListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileListRspMultiError) AllErrors() []error { return m }

// GetFileListRspValidationError is the validation error returned by
// GetFileListRsp.Validate if the designated constraints aren't met.
type GetFileListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileListRspValidationError) ErrorName() string { return "GetFileListRspValidationError" }

// Error satisfies the builtin error interface
func (e GetFileListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileListRspValidationError{}

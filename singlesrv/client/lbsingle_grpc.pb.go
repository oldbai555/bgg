// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: lbsingle.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LbsingleClient is the client API for Lbsingle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LbsingleClient interface {
	// @cat:
	// @name:
	// @desc: 删除文件
	// @error:
	DelFileList(ctx context.Context, in *DelFileListReq, opts ...grpc.CallOption) (*DelFileListRsp, error)
	// @cat:
	// @name:
	// @desc: 获取单个文件
	// @error:
	GetFile(ctx context.Context, in *GetFileReq, opts ...grpc.CallOption) (*GetFileRsp, error)
	// @cat:
	// @name:
	// @desc: 获取文件列表
	// @error:
	GetFileList(ctx context.Context, in *GetFileListReq, opts ...grpc.CallOption) (*GetFileListRsp, error)
	// @desc: 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// @desc: 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error)
	// @desc: 获取登录用户的信息
	GetLoginUser(ctx context.Context, in *GetLoginUserReq, opts ...grpc.CallOption) (*GetLoginUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error: 更新登陆的用户信息
	UpdateLoginUserInfo(ctx context.Context, in *UpdateLoginUserInfoReq, opts ...grpc.CallOption) (*UpdateLoginUserInfoRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	SyncFile(ctx context.Context, in *SyncFileReq, opts ...grpc.CallOption) (*SyncFileRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	DelUserList(ctx context.Context, in *DelUserListReq, opts ...grpc.CallOption) (*DelUserListRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	AddFoodMenu(ctx context.Context, in *AddFoodMenuReq, opts ...grpc.CallOption) (*AddFoodMenuRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	DelFoodMenuList(ctx context.Context, in *DelFoodMenuListReq, opts ...grpc.CallOption) (*DelFoodMenuListRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	UpdateFoodMenu(ctx context.Context, in *UpdateFoodMenuReq, opts ...grpc.CallOption) (*UpdateFoodMenuRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	GetFoodMenu(ctx context.Context, in *GetFoodMenuReq, opts ...grpc.CallOption) (*GetFoodMenuRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	GetFoodMenuList(ctx context.Context, in *GetFoodMenuListReq, opts ...grpc.CallOption) (*GetFoodMenuListRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	AddFoodMenuElem(ctx context.Context, in *AddFoodMenuElemReq, opts ...grpc.CallOption) (*AddFoodMenuElemRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	DelFoodMenuElemList(ctx context.Context, in *DelFoodMenuElemListReq, opts ...grpc.CallOption) (*DelFoodMenuElemListRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	UpdateFoodMenuElem(ctx context.Context, in *UpdateFoodMenuElemReq, opts ...grpc.CallOption) (*UpdateFoodMenuElemRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	GetFoodMenuElem(ctx context.Context, in *GetFoodMenuElemReq, opts ...grpc.CallOption) (*GetFoodMenuElemRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	GetFoodMenuElemList(ctx context.Context, in *GetFoodMenuElemListReq, opts ...grpc.CallOption) (*GetFoodMenuElemListRsp, error)
}

type lbsingleClient struct {
	cc grpc.ClientConnInterface
}

func NewLbsingleClient(cc grpc.ClientConnInterface) LbsingleClient {
	return &lbsingleClient{cc}
}

func (c *lbsingleClient) DelFileList(ctx context.Context, in *DelFileListReq, opts ...grpc.CallOption) (*DelFileListRsp, error) {
	out := new(DelFileListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/DelFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetFile(ctx context.Context, in *GetFileReq, opts ...grpc.CallOption) (*GetFileRsp, error) {
	out := new(GetFileRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetFileList(ctx context.Context, in *GetFileListReq, opts ...grpc.CallOption) (*GetFileListRsp, error) {
	out := new(GetFileListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error) {
	out := new(LogoutRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetLoginUser(ctx context.Context, in *GetLoginUserReq, opts ...grpc.CallOption) (*GetLoginUserRsp, error) {
	out := new(GetLoginUserRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetLoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) UpdateLoginUserInfo(ctx context.Context, in *UpdateLoginUserInfoReq, opts ...grpc.CallOption) (*UpdateLoginUserInfoRsp, error) {
	out := new(UpdateLoginUserInfoRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/UpdateLoginUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRsp, error) {
	out := new(ResetPasswordRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) SyncFile(ctx context.Context, in *SyncFileReq, opts ...grpc.CallOption) (*SyncFileRsp, error) {
	out := new(SyncFileRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/SyncFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error) {
	out := new(AddUserRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) DelUserList(ctx context.Context, in *DelUserListReq, opts ...grpc.CallOption) (*DelUserListRsp, error) {
	out := new(DelUserListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/DelUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRsp, error) {
	out := new(UpdateUserRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRsp, error) {
	out := new(GetUserRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListRsp, error) {
	out := new(GetUserListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) AddFoodMenu(ctx context.Context, in *AddFoodMenuReq, opts ...grpc.CallOption) (*AddFoodMenuRsp, error) {
	out := new(AddFoodMenuRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/AddFoodMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) DelFoodMenuList(ctx context.Context, in *DelFoodMenuListReq, opts ...grpc.CallOption) (*DelFoodMenuListRsp, error) {
	out := new(DelFoodMenuListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/DelFoodMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) UpdateFoodMenu(ctx context.Context, in *UpdateFoodMenuReq, opts ...grpc.CallOption) (*UpdateFoodMenuRsp, error) {
	out := new(UpdateFoodMenuRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/UpdateFoodMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetFoodMenu(ctx context.Context, in *GetFoodMenuReq, opts ...grpc.CallOption) (*GetFoodMenuRsp, error) {
	out := new(GetFoodMenuRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetFoodMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetFoodMenuList(ctx context.Context, in *GetFoodMenuListReq, opts ...grpc.CallOption) (*GetFoodMenuListRsp, error) {
	out := new(GetFoodMenuListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetFoodMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) AddFoodMenuElem(ctx context.Context, in *AddFoodMenuElemReq, opts ...grpc.CallOption) (*AddFoodMenuElemRsp, error) {
	out := new(AddFoodMenuElemRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/AddFoodMenuElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) DelFoodMenuElemList(ctx context.Context, in *DelFoodMenuElemListReq, opts ...grpc.CallOption) (*DelFoodMenuElemListRsp, error) {
	out := new(DelFoodMenuElemListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/DelFoodMenuElemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) UpdateFoodMenuElem(ctx context.Context, in *UpdateFoodMenuElemReq, opts ...grpc.CallOption) (*UpdateFoodMenuElemRsp, error) {
	out := new(UpdateFoodMenuElemRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/UpdateFoodMenuElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetFoodMenuElem(ctx context.Context, in *GetFoodMenuElemReq, opts ...grpc.CallOption) (*GetFoodMenuElemRsp, error) {
	out := new(GetFoodMenuElemRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetFoodMenuElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsingleClient) GetFoodMenuElemList(ctx context.Context, in *GetFoodMenuElemListReq, opts ...grpc.CallOption) (*GetFoodMenuElemListRsp, error) {
	out := new(GetFoodMenuElemListRsp)
	err := c.cc.Invoke(ctx, "/lbsingle.lbsingle/GetFoodMenuElemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbsingleServer is the server API for Lbsingle service.
// All implementations must embed UnimplementedLbsingleServer
// for forward compatibility
type LbsingleServer interface {
	// @cat:
	// @name:
	// @desc: 删除文件
	// @error:
	DelFileList(context.Context, *DelFileListReq) (*DelFileListRsp, error)
	// @cat:
	// @name:
	// @desc: 获取单个文件
	// @error:
	GetFile(context.Context, *GetFileReq) (*GetFileRsp, error)
	// @cat:
	// @name:
	// @desc: 获取文件列表
	// @error:
	GetFileList(context.Context, *GetFileListReq) (*GetFileListRsp, error)
	// @desc: 登录
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// @desc: 登出
	Logout(context.Context, *LogoutReq) (*LogoutRsp, error)
	// @desc: 获取登录用户的信息
	GetLoginUser(context.Context, *GetLoginUserReq) (*GetLoginUserRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error: 更新登陆的用户信息
	UpdateLoginUserInfo(context.Context, *UpdateLoginUserInfoReq) (*UpdateLoginUserInfoRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRsp, error)
	// @cat:
	// @name:
	// @desc:
	// @error:
	SyncFile(context.Context, *SyncFileReq) (*SyncFileRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	AddUser(context.Context, *AddUserReq) (*AddUserRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	DelUserList(context.Context, *DelUserListReq) (*DelUserListRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	GetUser(context.Context, *GetUserReq) (*GetUserRsp, error)
	// @cat: User
	// @name:
	// @desc:
	// @error:
	GetUserList(context.Context, *GetUserListReq) (*GetUserListRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	AddFoodMenu(context.Context, *AddFoodMenuReq) (*AddFoodMenuRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	DelFoodMenuList(context.Context, *DelFoodMenuListReq) (*DelFoodMenuListRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	UpdateFoodMenu(context.Context, *UpdateFoodMenuReq) (*UpdateFoodMenuRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	GetFoodMenu(context.Context, *GetFoodMenuReq) (*GetFoodMenuRsp, error)
	// @cat: FoodMenu
	// @name: 菜单
	// @desc:
	// @error:
	GetFoodMenuList(context.Context, *GetFoodMenuListReq) (*GetFoodMenuListRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	AddFoodMenuElem(context.Context, *AddFoodMenuElemReq) (*AddFoodMenuElemRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	DelFoodMenuElemList(context.Context, *DelFoodMenuElemListReq) (*DelFoodMenuElemListRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	UpdateFoodMenuElem(context.Context, *UpdateFoodMenuElemReq) (*UpdateFoodMenuElemRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	GetFoodMenuElem(context.Context, *GetFoodMenuElemReq) (*GetFoodMenuElemRsp, error)
	// @cat: FoodMenuElem
	// @name: 菜单选项
	// @desc:
	// @error:
	GetFoodMenuElemList(context.Context, *GetFoodMenuElemListReq) (*GetFoodMenuElemListRsp, error)
	mustEmbedUnimplementedLbsingleServer()
}

// UnimplementedLbsingleServer must be embedded to have forward compatible implementations.
type UnimplementedLbsingleServer struct {
}

func (UnimplementedLbsingleServer) DelFileList(context.Context, *DelFileListReq) (*DelFileListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFileList not implemented")
}
func (UnimplementedLbsingleServer) GetFile(context.Context, *GetFileReq) (*GetFileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedLbsingleServer) GetFileList(context.Context, *GetFileListReq) (*GetFileListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedLbsingleServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLbsingleServer) Logout(context.Context, *LogoutReq) (*LogoutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedLbsingleServer) GetLoginUser(context.Context, *GetLoginUserReq) (*GetLoginUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginUser not implemented")
}
func (UnimplementedLbsingleServer) UpdateLoginUserInfo(context.Context, *UpdateLoginUserInfoReq) (*UpdateLoginUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginUserInfo not implemented")
}
func (UnimplementedLbsingleServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedLbsingleServer) SyncFile(context.Context, *SyncFileReq) (*SyncFileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFile not implemented")
}
func (UnimplementedLbsingleServer) AddUser(context.Context, *AddUserReq) (*AddUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedLbsingleServer) DelUserList(context.Context, *DelUserListReq) (*DelUserListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserList not implemented")
}
func (UnimplementedLbsingleServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLbsingleServer) GetUser(context.Context, *GetUserReq) (*GetUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLbsingleServer) GetUserList(context.Context, *GetUserListReq) (*GetUserListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedLbsingleServer) AddFoodMenu(context.Context, *AddFoodMenuReq) (*AddFoodMenuRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFoodMenu not implemented")
}
func (UnimplementedLbsingleServer) DelFoodMenuList(context.Context, *DelFoodMenuListReq) (*DelFoodMenuListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFoodMenuList not implemented")
}
func (UnimplementedLbsingleServer) UpdateFoodMenu(context.Context, *UpdateFoodMenuReq) (*UpdateFoodMenuRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFoodMenu not implemented")
}
func (UnimplementedLbsingleServer) GetFoodMenu(context.Context, *GetFoodMenuReq) (*GetFoodMenuRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoodMenu not implemented")
}
func (UnimplementedLbsingleServer) GetFoodMenuList(context.Context, *GetFoodMenuListReq) (*GetFoodMenuListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoodMenuList not implemented")
}
func (UnimplementedLbsingleServer) AddFoodMenuElem(context.Context, *AddFoodMenuElemReq) (*AddFoodMenuElemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFoodMenuElem not implemented")
}
func (UnimplementedLbsingleServer) DelFoodMenuElemList(context.Context, *DelFoodMenuElemListReq) (*DelFoodMenuElemListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFoodMenuElemList not implemented")
}
func (UnimplementedLbsingleServer) UpdateFoodMenuElem(context.Context, *UpdateFoodMenuElemReq) (*UpdateFoodMenuElemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFoodMenuElem not implemented")
}
func (UnimplementedLbsingleServer) GetFoodMenuElem(context.Context, *GetFoodMenuElemReq) (*GetFoodMenuElemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoodMenuElem not implemented")
}
func (UnimplementedLbsingleServer) GetFoodMenuElemList(context.Context, *GetFoodMenuElemListReq) (*GetFoodMenuElemListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoodMenuElemList not implemented")
}
func (UnimplementedLbsingleServer) mustEmbedUnimplementedLbsingleServer() {}

// UnsafeLbsingleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LbsingleServer will
// result in compilation errors.
type UnsafeLbsingleServer interface {
	mustEmbedUnimplementedLbsingleServer()
}

func RegisterLbsingleServer(s grpc.ServiceRegistrar, srv LbsingleServer) {
	s.RegisterService(&Lbsingle_ServiceDesc, srv)
}

func _Lbsingle_DelFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).DelFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/DelFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).DelFileList(ctx, req.(*DelFileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetFile(ctx, req.(*GetFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetFileList(ctx, req.(*GetFileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetLoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetLoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetLoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetLoginUser(ctx, req.(*GetLoginUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_UpdateLoginUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).UpdateLoginUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/UpdateLoginUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).UpdateLoginUserInfo(ctx, req.(*UpdateLoginUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_SyncFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).SyncFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/SyncFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).SyncFile(ctx, req.(*SyncFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_DelUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).DelUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/DelUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).DelUserList(ctx, req.(*DelUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetUserList(ctx, req.(*GetUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_AddFoodMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFoodMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).AddFoodMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/AddFoodMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).AddFoodMenu(ctx, req.(*AddFoodMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_DelFoodMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFoodMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).DelFoodMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/DelFoodMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).DelFoodMenuList(ctx, req.(*DelFoodMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_UpdateFoodMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFoodMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).UpdateFoodMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/UpdateFoodMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).UpdateFoodMenu(ctx, req.(*UpdateFoodMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetFoodMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetFoodMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetFoodMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetFoodMenu(ctx, req.(*GetFoodMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetFoodMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetFoodMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetFoodMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetFoodMenuList(ctx, req.(*GetFoodMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_AddFoodMenuElem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFoodMenuElemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).AddFoodMenuElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/AddFoodMenuElem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).AddFoodMenuElem(ctx, req.(*AddFoodMenuElemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_DelFoodMenuElemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFoodMenuElemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).DelFoodMenuElemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/DelFoodMenuElemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).DelFoodMenuElemList(ctx, req.(*DelFoodMenuElemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_UpdateFoodMenuElem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFoodMenuElemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).UpdateFoodMenuElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/UpdateFoodMenuElem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).UpdateFoodMenuElem(ctx, req.(*UpdateFoodMenuElemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetFoodMenuElem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodMenuElemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetFoodMenuElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetFoodMenuElem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetFoodMenuElem(ctx, req.(*GetFoodMenuElemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbsingle_GetFoodMenuElemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodMenuElemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsingleServer).GetFoodMenuElemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbsingle.lbsingle/GetFoodMenuElemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsingleServer).GetFoodMenuElemList(ctx, req.(*GetFoodMenuElemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lbsingle_ServiceDesc is the grpc.ServiceDesc for Lbsingle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lbsingle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbsingle.lbsingle",
	HandlerType: (*LbsingleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelFileList",
			Handler:    _Lbsingle_DelFileList_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _Lbsingle_GetFile_Handler,
		},
		{
			MethodName: "GetFileList",
			Handler:    _Lbsingle_GetFileList_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Lbsingle_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Lbsingle_Logout_Handler,
		},
		{
			MethodName: "GetLoginUser",
			Handler:    _Lbsingle_GetLoginUser_Handler,
		},
		{
			MethodName: "UpdateLoginUserInfo",
			Handler:    _Lbsingle_UpdateLoginUserInfo_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Lbsingle_ResetPassword_Handler,
		},
		{
			MethodName: "SyncFile",
			Handler:    _Lbsingle_SyncFile_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Lbsingle_AddUser_Handler,
		},
		{
			MethodName: "DelUserList",
			Handler:    _Lbsingle_DelUserList_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Lbsingle_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Lbsingle_GetUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _Lbsingle_GetUserList_Handler,
		},
		{
			MethodName: "AddFoodMenu",
			Handler:    _Lbsingle_AddFoodMenu_Handler,
		},
		{
			MethodName: "DelFoodMenuList",
			Handler:    _Lbsingle_DelFoodMenuList_Handler,
		},
		{
			MethodName: "UpdateFoodMenu",
			Handler:    _Lbsingle_UpdateFoodMenu_Handler,
		},
		{
			MethodName: "GetFoodMenu",
			Handler:    _Lbsingle_GetFoodMenu_Handler,
		},
		{
			MethodName: "GetFoodMenuList",
			Handler:    _Lbsingle_GetFoodMenuList_Handler,
		},
		{
			MethodName: "AddFoodMenuElem",
			Handler:    _Lbsingle_AddFoodMenuElem_Handler,
		},
		{
			MethodName: "DelFoodMenuElemList",
			Handler:    _Lbsingle_DelFoodMenuElemList_Handler,
		},
		{
			MethodName: "UpdateFoodMenuElem",
			Handler:    _Lbsingle_UpdateFoodMenuElem_Handler,
		},
		{
			MethodName: "GetFoodMenuElem",
			Handler:    _Lbsingle_GetFoodMenuElem_Handler,
		},
		{
			MethodName: "GetFoodMenuElemList",
			Handler:    _Lbsingle_GetFoodMenuElemList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbsingle.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lbblog.proto

package lbblog

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelArticle with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelArticle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelArticle with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelArticleMultiError, or
// nil if none found.
func (m *ModelArticle) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelArticle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 300 {
		err := ModelArticleValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 300 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDesc()); l < 1 || l > 900 {
		err := ModelArticleValidationError{
			field:  "Desc",
			reason: "value length must be between 1 and 900 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCategoryId() <= 0 {
		err := ModelArticleValidationError{
			field:  "CategoryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Img

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := ModelArticleValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModelArticleMultiError(errors)
	}

	return nil
}

// ModelArticleMultiError is an error wrapping multiple validation errors
// returned by ModelArticle.ValidateAll() if the designated constraints aren't met.
type ModelArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelArticleMultiError) AllErrors() []error { return m }

// ModelArticleValidationError is the validation error returned by
// ModelArticle.Validate if the designated constraints aren't met.
type ModelArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelArticleValidationError) ErrorName() string { return "ModelArticleValidationError" }

// Error satisfies the builtin error interface
func (e ModelArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelArticle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelArticleValidationError{}

// Validate checks the field values on ModelCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelCategoryMultiError, or
// nil if none found.
func (m *ModelCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 300 {
		err := ModelCategoryValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 300 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModelCategoryMultiError(errors)
	}

	return nil
}

// ModelCategoryMultiError is an error wrapping multiple validation errors
// returned by ModelCategory.ValidateAll() if the designated constraints
// aren't met.
type ModelCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelCategoryMultiError) AllErrors() []error { return m }

// ModelCategoryValidationError is the validation error returned by
// ModelCategory.Validate if the designated constraints aren't met.
type ModelCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelCategoryValidationError) ErrorName() string { return "ModelCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ModelCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelCategoryValidationError{}

// Validate checks the field values on ModelComment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelComment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelComment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelCommentMultiError, or
// nil if none found.
func (m *ModelComment) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelComment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if m.GetArticleId() <= 0 {
		err := ModelCommentValidationError{
			field:  "ArticleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	// no validation rules for UserEmail

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := ModelCommentValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ModelCommentMultiError(errors)
	}

	return nil
}

// ModelCommentMultiError is an error wrapping multiple validation errors
// returned by ModelComment.ValidateAll() if the designated constraints aren't met.
type ModelCommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelCommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelCommentMultiError) AllErrors() []error { return m }

// ModelCommentValidationError is the validation error returned by
// ModelComment.Validate if the designated constraints aren't met.
type ModelCommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelCommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelCommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelCommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelCommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelCommentValidationError) ErrorName() string { return "ModelCommentValidationError" }

// Error satisfies the builtin error interface
func (e ModelCommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelCommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelCommentValidationError{}

// Validate checks the field values on GetArticleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReqMultiError, or nil if none found.
func (m *GetArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetArticleListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArticleListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArticleListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArticleListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetArticleListReqMultiError(errors)
	}

	return nil
}

// GetArticleListReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReqMultiError) AllErrors() []error { return m }

// GetArticleListReqValidationError is the validation error returned by
// GetArticleListReq.Validate if the designated constraints aren't met.
type GetArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReqValidationError) ErrorName() string {
	return "GetArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReqValidationError{}

// Validate checks the field values on GetArticleListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListRspMultiError, or nil if none found.
func (m *GetArticleListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArticleListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArticleListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArticleListRspValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]uint64, len(m.GetCategoryMap()))
		i := 0
		for key := range m.GetCategoryMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCategoryMap()[key]
			_ = val

			// no validation rules for CategoryMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetArticleListRspValidationError{
							field:  fmt.Sprintf("CategoryMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetArticleListRspValidationError{
							field:  fmt.Sprintf("CategoryMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetArticleListRspValidationError{
						field:  fmt.Sprintf("CategoryMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetArticleListRspMultiError(errors)
	}

	return nil
}

// GetArticleListRspMultiError is an error wrapping multiple validation errors
// returned by GetArticleListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetArticleListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListRspMultiError) AllErrors() []error { return m }

// GetArticleListRspValidationError is the validation error returned by
// GetArticleListRsp.Validate if the designated constraints aren't met.
type GetArticleListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListRspValidationError) ErrorName() string {
	return "GetArticleListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListRspValidationError{}

// Validate checks the field values on GetArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetArticleReqMultiError, or
// nil if none found.
func (m *GetArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetArticleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArticleReqMultiError(errors)
	}

	return nil
}

// GetArticleReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleReqMultiError) AllErrors() []error { return m }

// GetArticleReqValidationError is the validation error returned by
// GetArticleReq.Validate if the designated constraints aren't met.
type GetArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleReqValidationError) ErrorName() string { return "GetArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleReqValidationError{}

// Validate checks the field values on GetArticleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetArticleRspMultiError, or
// nil if none found.
func (m *GetArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArticleRspValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArticleRspValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArticleRspValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetArticleRspMultiError(errors)
	}

	return nil
}

// GetArticleRspMultiError is an error wrapping multiple validation errors
// returned by GetArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type GetArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleRspMultiError) AllErrors() []error { return m }

// GetArticleRspValidationError is the validation error returned by
// GetArticleRsp.Validate if the designated constraints aren't met.
type GetArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleRspValidationError) ErrorName() string { return "GetArticleRspValidationError" }

// Error satisfies the builtin error interface
func (e GetArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleRspValidationError{}

// Validate checks the field values on UpdateArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleReqMultiError, or nil if none found.
func (m *UpdateArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetArticle() == nil {
		err := UpdateArticleReqValidationError{
			field:  "Article",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateArticleReqValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateArticleReqValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArticleReqValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateArticleReqMultiError(errors)
	}

	return nil
}

// UpdateArticleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateArticleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleReqMultiError) AllErrors() []error { return m }

// UpdateArticleReqValidationError is the validation error returned by
// UpdateArticleReq.Validate if the designated constraints aren't met.
type UpdateArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleReqValidationError) ErrorName() string { return "UpdateArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleReqValidationError{}

// Validate checks the field values on UpdateArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleRspMultiError, or nil if none found.
func (m *UpdateArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateArticleRspMultiError(errors)
	}

	return nil
}

// UpdateArticleRspMultiError is an error wrapping multiple validation errors
// returned by UpdateArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleRspMultiError) AllErrors() []error { return m }

// UpdateArticleRspValidationError is the validation error returned by
// UpdateArticleRsp.Validate if the designated constraints aren't met.
type UpdateArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleRspValidationError) ErrorName() string { return "UpdateArticleRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleRspValidationError{}

// Validate checks the field values on DelArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelArticleReqMultiError, or
// nil if none found.
func (m *DelArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DelArticleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelArticleReqMultiError(errors)
	}

	return nil
}

// DelArticleReqMultiError is an error wrapping multiple validation errors
// returned by DelArticleReq.ValidateAll() if the designated constraints
// aren't met.
type DelArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelArticleReqMultiError) AllErrors() []error { return m }

// DelArticleReqValidationError is the validation error returned by
// DelArticleReq.Validate if the designated constraints aren't met.
type DelArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelArticleReqValidationError) ErrorName() string { return "DelArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e DelArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelArticleReqValidationError{}

// Validate checks the field values on DelArticleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelArticleRspMultiError, or
// nil if none found.
func (m *DelArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelArticleRspMultiError(errors)
	}

	return nil
}

// DelArticleRspMultiError is an error wrapping multiple validation errors
// returned by DelArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type DelArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelArticleRspMultiError) AllErrors() []error { return m }

// DelArticleRspValidationError is the validation error returned by
// DelArticleRsp.Validate if the designated constraints aren't met.
type DelArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelArticleRspValidationError) ErrorName() string { return "DelArticleRspValidationError" }

// Error satisfies the builtin error interface
func (e DelArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelArticleRspValidationError{}

// Validate checks the field values on AddArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddArticleReqMultiError, or
// nil if none found.
func (m *AddArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetArticle() == nil {
		err := AddArticleReqValidationError{
			field:  "Article",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddArticleReqValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddArticleReqValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddArticleReqValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddArticleReqMultiError(errors)
	}

	return nil
}

// AddArticleReqMultiError is an error wrapping multiple validation errors
// returned by AddArticleReq.ValidateAll() if the designated constraints
// aren't met.
type AddArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddArticleReqMultiError) AllErrors() []error { return m }

// AddArticleReqValidationError is the validation error returned by
// AddArticleReq.Validate if the designated constraints aren't met.
type AddArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddArticleReqValidationError) ErrorName() string { return "AddArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e AddArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddArticleReqValidationError{}

// Validate checks the field values on AddArticleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddArticleRspMultiError, or
// nil if none found.
func (m *AddArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddArticleRspValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddArticleRspValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddArticleRspValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddArticleRspMultiError(errors)
	}

	return nil
}

// AddArticleRspMultiError is an error wrapping multiple validation errors
// returned by AddArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type AddArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddArticleRspMultiError) AllErrors() []error { return m }

// AddArticleRspValidationError is the validation error returned by
// AddArticleRsp.Validate if the designated constraints aren't met.
type AddArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddArticleRspValidationError) ErrorName() string { return "AddArticleRspValidationError" }

// Error satisfies the builtin error interface
func (e AddArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddArticleRspValidationError{}

// Validate checks the field values on GetCategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryListReqMultiError, or nil if none found.
func (m *GetCategoryListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetCategoryListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryListReqMultiError(errors)
	}

	return nil
}

// GetCategoryListReqMultiError is an error wrapping multiple validation errors
// returned by GetCategoryListReq.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryListReqMultiError) AllErrors() []error { return m }

// GetCategoryListReqValidationError is the validation error returned by
// GetCategoryListReq.Validate if the designated constraints aren't met.
type GetCategoryListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryListReqValidationError) ErrorName() string {
	return "GetCategoryListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryListReqValidationError{}

// Validate checks the field values on GetCategoryListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryListRspMultiError, or nil if none found.
func (m *GetCategoryListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryListRspValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoryListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoryListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoryListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCategoryListRspMultiError(errors)
	}

	return nil
}

// GetCategoryListRspMultiError is an error wrapping multiple validation errors
// returned by GetCategoryListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryListRspMultiError) AllErrors() []error { return m }

// GetCategoryListRspValidationError is the validation error returned by
// GetCategoryListRsp.Validate if the designated constraints aren't met.
type GetCategoryListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryListRspValidationError) ErrorName() string {
	return "GetCategoryListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryListRspValidationError{}

// Validate checks the field values on GetCategoryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCategoryReqMultiError,
// or nil if none found.
func (m *GetCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCategoryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCategoryReqMultiError(errors)
	}

	return nil
}

// GetCategoryReqMultiError is an error wrapping multiple validation errors
// returned by GetCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryReqMultiError) AllErrors() []error { return m }

// GetCategoryReqValidationError is the validation error returned by
// GetCategoryReq.Validate if the designated constraints aren't met.
type GetCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryReqValidationError) ErrorName() string { return "GetCategoryReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryReqValidationError{}

// Validate checks the field values on GetCategoryRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCategoryRspMultiError,
// or nil if none found.
func (m *GetCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryRspValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryRspMultiError(errors)
	}

	return nil
}

// GetCategoryRspMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRsp.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRspMultiError) AllErrors() []error { return m }

// GetCategoryRspValidationError is the validation error returned by
// GetCategoryRsp.Validate if the designated constraints aren't met.
type GetCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRspValidationError) ErrorName() string { return "GetCategoryRspValidationError" }

// Error satisfies the builtin error interface
func (e GetCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRspValidationError{}

// Validate checks the field values on UpdateCategoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryReqMultiError, or nil if none found.
func (m *UpdateCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := UpdateCategoryReqValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryReqValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryReqMultiError(errors)
	}

	return nil
}

// UpdateCategoryReqMultiError is an error wrapping multiple validation errors
// returned by UpdateCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryReqMultiError) AllErrors() []error { return m }

// UpdateCategoryReqValidationError is the validation error returned by
// UpdateCategoryReq.Validate if the designated constraints aren't met.
type UpdateCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryReqValidationError) ErrorName() string {
	return "UpdateCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryReqValidationError{}

// Validate checks the field values on UpdateCategoryRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRspMultiError, or nil if none found.
func (m *UpdateCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCategoryRspMultiError(errors)
	}

	return nil
}

// UpdateCategoryRspMultiError is an error wrapping multiple validation errors
// returned by UpdateCategoryRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRspMultiError) AllErrors() []error { return m }

// UpdateCategoryRspValidationError is the validation error returned by
// UpdateCategoryRsp.Validate if the designated constraints aren't met.
type UpdateCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRspValidationError) ErrorName() string {
	return "UpdateCategoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRspValidationError{}

// Validate checks the field values on DelCategoryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCategoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelCategoryReqMultiError,
// or nil if none found.
func (m *DelCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DelCategoryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelCategoryReqMultiError(errors)
	}

	return nil
}

// DelCategoryReqMultiError is an error wrapping multiple validation errors
// returned by DelCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type DelCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCategoryReqMultiError) AllErrors() []error { return m }

// DelCategoryReqValidationError is the validation error returned by
// DelCategoryReq.Validate if the designated constraints aren't met.
type DelCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCategoryReqValidationError) ErrorName() string { return "DelCategoryReqValidationError" }

// Error satisfies the builtin error interface
func (e DelCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCategoryReqValidationError{}

// Validate checks the field values on DelCategoryRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCategoryRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelCategoryRspMultiError,
// or nil if none found.
func (m *DelCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelCategoryRspMultiError(errors)
	}

	return nil
}

// DelCategoryRspMultiError is an error wrapping multiple validation errors
// returned by DelCategoryRsp.ValidateAll() if the designated constraints
// aren't met.
type DelCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCategoryRspMultiError) AllErrors() []error { return m }

// DelCategoryRspValidationError is the validation error returned by
// DelCategoryRsp.Validate if the designated constraints aren't met.
type DelCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCategoryRspValidationError) ErrorName() string { return "DelCategoryRspValidationError" }

// Error satisfies the builtin error interface
func (e DelCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCategoryRspValidationError{}

// Validate checks the field values on AddCategoryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCategoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddCategoryReqMultiError,
// or nil if none found.
func (m *AddCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := AddCategoryReqValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCategoryReqValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCategoryReqValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCategoryReqMultiError(errors)
	}

	return nil
}

// AddCategoryReqMultiError is an error wrapping multiple validation errors
// returned by AddCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type AddCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCategoryReqMultiError) AllErrors() []error { return m }

// AddCategoryReqValidationError is the validation error returned by
// AddCategoryReq.Validate if the designated constraints aren't met.
type AddCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCategoryReqValidationError) ErrorName() string { return "AddCategoryReqValidationError" }

// Error satisfies the builtin error interface
func (e AddCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCategoryReqValidationError{}

// Validate checks the field values on AddCategoryRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCategoryRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddCategoryRspMultiError,
// or nil if none found.
func (m *AddCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCategoryRspValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCategoryRspValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCategoryRspMultiError(errors)
	}

	return nil
}

// AddCategoryRspMultiError is an error wrapping multiple validation errors
// returned by AddCategoryRsp.ValidateAll() if the designated constraints
// aren't met.
type AddCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCategoryRspMultiError) AllErrors() []error { return m }

// AddCategoryRspValidationError is the validation error returned by
// AddCategoryRsp.Validate if the designated constraints aren't met.
type AddCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCategoryRspValidationError) ErrorName() string { return "AddCategoryRspValidationError" }

// Error satisfies the builtin error interface
func (e AddCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCategoryRspValidationError{}

// Validate checks the field values on GetCommentListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentListReqMultiError, or nil if none found.
func (m *GetCommentListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetListOption() == nil {
		err := GetCommentListReqValidationError{
			field:  "ListOption",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentListReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentListReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentListReqMultiError(errors)
	}

	return nil
}

// GetCommentListReqMultiError is an error wrapping multiple validation errors
// returned by GetCommentListReq.ValidateAll() if the designated constraints
// aren't met.
type GetCommentListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListReqMultiError) AllErrors() []error { return m }

// GetCommentListReqValidationError is the validation error returned by
// GetCommentListReq.Validate if the designated constraints aren't met.
type GetCommentListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListReqValidationError) ErrorName() string {
	return "GetCommentListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListReqValidationError{}

// Validate checks the field values on GetCommentListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentListRspMultiError, or nil if none found.
func (m *GetCommentListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentListRspValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentListRspValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentListRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentListRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]uint64, len(m.GetArticleMap()))
		i := 0
		for key := range m.GetArticleMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetArticleMap()[key]
			_ = val

			// no validation rules for ArticleMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetCommentListRspValidationError{
							field:  fmt.Sprintf("ArticleMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetCommentListRspValidationError{
							field:  fmt.Sprintf("ArticleMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetCommentListRspValidationError{
						field:  fmt.Sprintf("ArticleMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]uint64, len(m.GetUserMap()))
		i := 0
		for key := range m.GetUserMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUserMap()[key]
			_ = val

			// no validation rules for UserMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetCommentListRspValidationError{
							field:  fmt.Sprintf("UserMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetCommentListRspValidationError{
							field:  fmt.Sprintf("UserMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetCommentListRspValidationError{
						field:  fmt.Sprintf("UserMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetCommentListRspMultiError(errors)
	}

	return nil
}

// GetCommentListRspMultiError is an error wrapping multiple validation errors
// returned by GetCommentListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetCommentListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListRspMultiError) AllErrors() []error { return m }

// GetCommentListRspValidationError is the validation error returned by
// GetCommentListRsp.Validate if the designated constraints aren't met.
type GetCommentListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListRspValidationError) ErrorName() string {
	return "GetCommentListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListRspValidationError{}

// Validate checks the field values on GetCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCommentReqMultiError, or
// nil if none found.
func (m *GetCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCommentReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommentReqMultiError(errors)
	}

	return nil
}

// GetCommentReqMultiError is an error wrapping multiple validation errors
// returned by GetCommentReq.ValidateAll() if the designated constraints
// aren't met.
type GetCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentReqMultiError) AllErrors() []error { return m }

// GetCommentReqValidationError is the validation error returned by
// GetCommentReq.Validate if the designated constraints aren't met.
type GetCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReqValidationError) ErrorName() string { return "GetCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReqValidationError{}

// Validate checks the field values on GetCommentRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCommentRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCommentRspMultiError, or
// nil if none found.
func (m *GetCommentRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentRspValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentRspValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentRspValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentRspMultiError(errors)
	}

	return nil
}

// GetCommentRspMultiError is an error wrapping multiple validation errors
// returned by GetCommentRsp.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRspMultiError) AllErrors() []error { return m }

// GetCommentRspValidationError is the validation error returned by
// GetCommentRsp.Validate if the designated constraints aren't met.
type GetCommentRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRspValidationError) ErrorName() string { return "GetCommentRspValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRspValidationError{}

// Validate checks the field values on UpdateCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentReqMultiError, or nil if none found.
func (m *UpdateCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := UpdateCommentReqValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommentReqValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommentReqValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommentReqValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommentReqMultiError(errors)
	}

	return nil
}

// UpdateCommentReqMultiError is an error wrapping multiple validation errors
// returned by UpdateCommentReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentReqMultiError) AllErrors() []error { return m }

// UpdateCommentReqValidationError is the validation error returned by
// UpdateCommentReq.Validate if the designated constraints aren't met.
type UpdateCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentReqValidationError) ErrorName() string { return "UpdateCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentReqValidationError{}

// Validate checks the field values on UpdateCommentRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentRspMultiError, or nil if none found.
func (m *UpdateCommentRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommentRspMultiError(errors)
	}

	return nil
}

// UpdateCommentRspMultiError is an error wrapping multiple validation errors
// returned by UpdateCommentRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateCommentRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentRspMultiError) AllErrors() []error { return m }

// UpdateCommentRspValidationError is the validation error returned by
// UpdateCommentRsp.Validate if the designated constraints aren't met.
type UpdateCommentRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRspValidationError) ErrorName() string { return "UpdateCommentRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCommentRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRspValidationError{}

// Validate checks the field values on DelCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelCommentReqMultiError, or
// nil if none found.
func (m *DelCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DelCommentReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelCommentReqMultiError(errors)
	}

	return nil
}

// DelCommentReqMultiError is an error wrapping multiple validation errors
// returned by DelCommentReq.ValidateAll() if the designated constraints
// aren't met.
type DelCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCommentReqMultiError) AllErrors() []error { return m }

// DelCommentReqValidationError is the validation error returned by
// DelCommentReq.Validate if the designated constraints aren't met.
type DelCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCommentReqValidationError) ErrorName() string { return "DelCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e DelCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCommentReqValidationError{}

// Validate checks the field values on DelCommentRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelCommentRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCommentRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelCommentRspMultiError, or
// nil if none found.
func (m *DelCommentRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCommentRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelCommentRspMultiError(errors)
	}

	return nil
}

// DelCommentRspMultiError is an error wrapping multiple validation errors
// returned by DelCommentRsp.ValidateAll() if the designated constraints
// aren't met.
type DelCommentRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCommentRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCommentRspMultiError) AllErrors() []error { return m }

// DelCommentRspValidationError is the validation error returned by
// DelCommentRsp.Validate if the designated constraints aren't met.
type DelCommentRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCommentRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCommentRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCommentRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCommentRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCommentRspValidationError) ErrorName() string { return "DelCommentRspValidationError" }

// Error satisfies the builtin error interface
func (e DelCommentRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCommentRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCommentRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCommentRspValidationError{}

// Validate checks the field values on AddCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddCommentReqMultiError, or
// nil if none found.
func (m *AddCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := AddCommentReqValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCommentReqValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCommentReqValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCommentReqValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCommentReqMultiError(errors)
	}

	return nil
}

// AddCommentReqMultiError is an error wrapping multiple validation errors
// returned by AddCommentReq.ValidateAll() if the designated constraints
// aren't met.
type AddCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentReqMultiError) AllErrors() []error { return m }

// AddCommentReqValidationError is the validation error returned by
// AddCommentReq.Validate if the designated constraints aren't met.
type AddCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentReqValidationError) ErrorName() string { return "AddCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e AddCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentReqValidationError{}

// Validate checks the field values on AddCommentRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddCommentRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddCommentRspMultiError, or
// nil if none found.
func (m *AddCommentRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCommentRspValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCommentRspValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCommentRspValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCommentRspMultiError(errors)
	}

	return nil
}

// AddCommentRspMultiError is an error wrapping multiple validation errors
// returned by AddCommentRsp.ValidateAll() if the designated constraints
// aren't met.
type AddCommentRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRspMultiError) AllErrors() []error { return m }

// AddCommentRspValidationError is the validation error returned by
// AddCommentRsp.Validate if the designated constraints aren't met.
type AddCommentRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRspValidationError) ErrorName() string { return "AddCommentRspValidationError" }

// Error satisfies the builtin error interface
func (e AddCommentRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRspValidationError{}
